{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/search/SearchResult.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchResult = ({\n  match,\n  addSong,\n  songs,\n  searchResult,\n  searchResults,\n  deleteSearchResults\n}) => {\n  const postSong = () => {};\n\n  const handleClick = () => {\n    if (!songs.map(s => s.spotify_id).includes(searchResult.id)) {\n      postSong();\n    } else {\n      alert('That song is already exists in the playlist');\n    }\n\n    const configObj = {\n      song: {\n        title: searchResult.name,\n        album_name: searchResult.album.name,\n        artists: searchResult.artists.map(a => a.name),\n        url: searchResult.external_urls.spotify,\n        spotify_id: searchResult.id\n      }\n    };\n    fetch(`http://localhost:3001${match.url}`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      },\n      credentials: 'include',\n      body: JSON.stringify(configObj)\n    }).then(response => response.json()).then(json => {\n      if (!json.errors) {\n        deleteSearchResults();\n        addSong(json);\n      } else {\n        alert(json.errors.join(\"\\n\"));\n      }\n    }).catch(error => console.log('API errors:', error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Song: \", /*#__PURE__*/_jsxDEV(\"a\", {\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        href: searchResult.external_urls.spotify,\n        children: searchResult.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Album: \", searchResult.album.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Artists: \", searchResult.artists.map(a => a.name).join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, searchResult.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SearchResult;\nexport default SearchResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/search/SearchResult.js"],"names":["React","SearchResult","match","addSong","songs","searchResult","searchResults","deleteSearchResults","postSong","handleClick","map","s","spotify_id","includes","id","alert","configObj","song","title","name","album_name","album","artists","a","url","external_urls","spotify","fetch","method","headers","credentials","body","JSON","stringify","then","response","json","errors","join","catch","error","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst SearchResult = ({match, addSong, songs, searchResult, searchResults,  deleteSearchResults}) => {\n\n    const postSong = () => {\n\n\n\n    }\n\n    const handleClick = () => {\n\n        if ( !songs.map( s => s.spotify_id ).includes(searchResult.id) ) {\n            postSong()            \n        } else {\n            alert('That song is already exists in the playlist')\n        }\n\n        const configObj = {\n            song: {\n                title: searchResult.name,\n                album_name: searchResult.album.name,\n                artists: searchResult.artists.map( a => a.name),\n                url: searchResult.external_urls.spotify,\n                spotify_id: searchResult.id\n            }\n        }\n\n        fetch(`http://localhost:3001${match.url}`, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n            credentials: 'include',\n            body: JSON.stringify(configObj)\n        })\n        .then(response => response.json())\n        .then( json => {\n\n            if (!json.errors) {\n                deleteSearchResults()\n                addSong(json)\n            } else {\n                alert(json.errors.join(\"\\n\"))\n            }\n\n        })\n        .catch(error => console.log('API errors:', error))\n\n    }\n\n    return (\n        <div key={searchResult.id}>\n            <div>\n                <button onClick={handleClick}>Add</button>\n            </div>\n            <p>Song: <a target=\"_blank\" rel=\"noopener noreferrer\" href={searchResult.external_urls.spotify}>{searchResult.name}</a></p>\n            <p>Album: {searchResult.album.name}</p>\n            <p>Artists: {searchResult.artists.map( a => a.name).join(', ')}</p>\n        </div>\n    )\n}\n\nexport default SearchResult\n\n"]},"metadata":{},"sourceType":"module"}