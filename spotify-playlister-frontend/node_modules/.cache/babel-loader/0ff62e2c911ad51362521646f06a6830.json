{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/search/SearchInput.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SearchInput extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: \"\"\n    };\n\n    this.accessSpotifyAPI = query => {\n      // Authorize user via Spotify's Client Credientials authorization flow\n      // For more info: https://github.com/spotify/web-api-auth-examples\n      const request = require('request');\n\n      const authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + new Buffer(SearchInput.CLIENT_ID + ':' + SearchInput.CLIENT_SECRET).toString('base64')\n        },\n        form: {\n          grant_type: 'client_credentials'\n        },\n        json: true\n      };\n      request.post(authOptions, (error, response, body) => {\n        if (!error && response.statusCode === 200) {\n          // Access Spotify API via Spotify Web API JS wrapper\n          // For more info: https://github.com/JMPerez/spotify-web-api-js\n          const spotify = new SpotifyWebApi();\n          const token = body.access_token;\n          spotify.setAccessToken(token);\n          spotify.searchTracks(query, {\n            limit: 3\n          }).then(data => {\n            //   data.tracks.items.length > 0 ?\n            //     this.setState( {searchResults: data.tracks.items} ) :\n            //     this.setState( {errors: \"Sorry, we could not find any songs.\"} )\n            console.log(this.state.searchResults);\n          }, err => {\n            console.error(err);\n          });\n        }\n      });\n    };\n\n    this.handleChange = e => this.setState({\n      query: e.target.value\n    });\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        errors: ''\n      });\n      this.accessSpotifyAPI(this.state.query);\n      this.setState({\n        query: ''\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChange,\n        value: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetSearch,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nSearchInput.CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nSearchInput.CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\nexport default SearchInput;","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/search/SearchInput.js"],"names":["React","Component","SpotifyWebApi","SearchInput","state","query","accessSpotifyAPI","request","require","authOptions","url","headers","Buffer","CLIENT_ID","CLIENT_SECRET","toString","form","grant_type","json","post","error","response","body","statusCode","spotify","token","access_token","setAccessToken","searchTracks","limit","then","data","console","log","searchResults","err","handleChange","e","setState","target","value","handleSubmit","preventDefault","errors","render","resetSearch","process","env","REACT_APP_CLIENT_ID","REACT_APP_CLIENT_SECRET"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;;;AAEA,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAKhCG,KALgC,GAKxB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KALwB;;AAAA,SAOhCC,gBAPgC,GAOZD,KAAD,IAAW;AAE5B;AACA;AACA,YAAME,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,YAAMC,WAAW,GAAG;AAClBC,QAAAA,GAAG,EAAE,wCADa;AAElBC,QAAAA,OAAO,EAAE;AAAE,2BAAiB,WAAY,IAAIC,MAAJ,CAAWT,WAAW,CAACU,SAAZ,GAAwB,GAAxB,GAA8BV,WAAW,CAACW,aAArD,EAAoEC,QAApE,CAA6E,QAA7E;AAA/B,SAFS;AAGlBC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAHY;AAIlBC,QAAAA,IAAI,EAAE;AAJY,OAApB;AAOAX,MAAAA,OAAO,CAACY,IAAR,CAAaV,WAAb,EAA0B,CAACW,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;AACnD,YAAI,CAACF,KAAD,IAAUC,QAAQ,CAACE,UAAT,KAAwB,GAAtC,EAA2C;AAEzC;AACA;AACA,gBAAMC,OAAO,GAAG,IAAItB,aAAJ,EAAhB;AACA,gBAAMuB,KAAK,GAAGH,IAAI,CAACI,YAAnB;AAEAF,UAAAA,OAAO,CAACG,cAAR,CAAuBF,KAAvB;AACAD,UAAAA,OAAO,CAACI,YAAR,CAAqBvB,KAArB,EAA4B;AAAEwB,YAAAA,KAAK,EAAE;AAAT,WAA5B,EAA0CC,IAA1C,CACGC,IAAD,IAAU;AACV;AACA;AACA;AACEC,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAW8B,aAAvB;AACD,WANH,EAOGC,GAAD,IAAS;AACPH,YAAAA,OAAO,CAACZ,KAAR,CAAce,GAAd;AACD,WATH;AAWD;AACF,OArBD;AAsBD,KAzC+B;;AAAA,SA2ChCC,YA3CgC,GA2ChBC,CAAD,IAAO,KAAKC,QAAL,CAAc;AAAEjC,MAAAA,KAAK,EAAEgC,CAAC,CAACE,MAAF,CAASC;AAAlB,KAAd,CA3CU;;AAAA,SA4ChCC,YA5CgC,GA4ChBJ,CAAD,IAAO;AACpBA,MAAAA,CAAC,CAACK,cAAF;AACA,WAAKJ,QAAL,CAAc;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAAd;AACA,WAAKrC,gBAAL,CAAsB,KAAKF,KAAL,CAAWC,KAAjC;AACA,WAAKiC,QAAL,CAAc;AAAEjC,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KAjD+B;AAAA;;AAmDhCuC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,QAAQ,EAAG,KAAKH,YAAtB;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAG,KAAKL,YAAnC;AAAkD,QAAA,KAAK,EAAE/B;AAAzD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,KAAKwC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AA3D+B;;AAA9B1C,W,CAEKU,S,GAAYiC,OAAO,CAACC,GAAR,CAAYC,mB;AAF7B7C,W,CAGKW,a,GAAgBgC,OAAO,CAACC,GAAR,CAAYE,uB;AA2DvC,eAAe9C,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nclass SearchInput extends Component {\n\n    static CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n    static CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n  \n    state = { query: \"\" }\n    \n    accessSpotifyAPI = (query) => {\n        \n      // Authorize user via Spotify's Client Credientials authorization flow\n      // For more info: https://github.com/spotify/web-api-auth-examples\n      const request = require('request')      \n      const authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: { 'Authorization': 'Basic ' + (new Buffer(SearchInput.CLIENT_ID + ':' + SearchInput.CLIENT_SECRET).toString('base64')) },\n        form: { grant_type: 'client_credentials' },\n        json: true\n      };\n        \n      request.post(authOptions, (error, response, body) => {\n        if (!error && response.statusCode === 200) {\n          \n          // Access Spotify API via Spotify Web API JS wrapper\n          // For more info: https://github.com/JMPerez/spotify-web-api-js\n          const spotify = new SpotifyWebApi();\n          const token = body.access_token;\n          \n          spotify.setAccessToken(token)\n          spotify.searchTracks(query, { limit: 3 }).then(\n            (data) => {\n            //   data.tracks.items.length > 0 ?\n            //     this.setState( {searchResults: data.tracks.items} ) :\n            //     this.setState( {errors: \"Sorry, we could not find any songs.\"} )\n              console.log(this.state.searchResults)\n            },\n            (err) => {\n              console.error(err);\n            }\n          )\n        }\n      })\n    }\n  \n    handleChange = (e) => this.setState({ query: e.target.value })\n    handleSubmit = (e) => {\n      e.preventDefault();        \n      this.setState({ errors: '' })\n      this.accessSpotifyAPI(this.state.query)\n      this.setState({ query: '' })\n    }    \n\n    render() {\n        return (\n            <form onSubmit={ this.handleSubmit }>\n                <input type=\"text\" onChange={ this.handleChange } value={query} />\n                <input type=\"submit\" />\n                <button onClick={this.resetSearch}>Clear</button>\n            </form>\n        );\n    }\n}\n\nexport default SearchInput;\n\n"]},"metadata":{},"sourceType":"module"}