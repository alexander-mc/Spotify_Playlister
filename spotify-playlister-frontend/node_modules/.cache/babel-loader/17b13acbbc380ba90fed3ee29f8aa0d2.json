{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/SongsContainer.js\";\nimport React, { Component } from 'react';\nimport Holding from '../components/Holding';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SongsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoading = () => {\n      debugger;\n\n      if (this.props.user.loading) {\n        return this.tempPage();\n      } else {\n        return this.authPlaylist();\n      }\n    };\n\n    this.authPlaylist = () => {\n      // Check user has logged in + :userId matches logged in user id\n      // If :userId does not match logged in user id, force correct user id in url and redirect PlaylistContainer\n      const isValidPlaylist = this.props.playlists.find(e => e.id === parseInt(this.props.match.params.playlistId, 10));\n      debugger;\n      return isValidPlaylist ? this.loadPage() : this.redirect();\n    };\n\n    this.redirect = () => this.props.history.push('/');\n\n    this.tempPage = () => /*#__PURE__*/_jsxDEV(Holding, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 22\n    }, this);\n\n    this.loadPage = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Playlist Songs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.handleLoading()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 24\n    }, this);\n  }\n\n}\n\n;\nexport default connect(({\n  songs\n}) => ({\n  songs\n}), {})(SongsContainer);","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/SongsContainer.js"],"names":["React","Component","Holding","connect","SongsContainer","handleLoading","props","user","loading","tempPage","authPlaylist","isValidPlaylist","playlists","find","e","id","parseInt","match","params","playlistId","loadPage","redirect","history","push","componentDidMount","fetchUser","render","songs"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,cAAN,SAA6BH,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAMnCI,aANmC,GAMnB,MAAM;AAClB;;AACA,UAAI,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,OAApB,EAA6B;AACzB,eAAO,KAAKC,QAAL,EAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAKC,YAAL,EAAP;AACH;AACJ,KAbkC;;AAAA,SAenCA,YAfmC,GAepB,MAAM;AACjB;AACA;AACA,YAAMC,eAAe,GAAG,KAAKL,KAAL,CAAWM,SAAX,CAAqBC,IAArB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASC,QAAQ,CAAC,KAAKV,KAAL,CAAWW,KAAX,CAAiBC,MAAjB,CAAwBC,UAAzB,EAAqC,EAArC,CAAjD,CAAxB;AACA;AACA,aAAOR,eAAe,GAAG,KAAKS,QAAL,EAAH,GAAqB,KAAKC,QAAL,EAA3C;AACD,KArBgC;;AAAA,SAsBnCA,QAtBmC,GAsBxB,MAAM,KAAKf,KAAL,CAAWgB,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB,CAtBkB;;AAAA,SAuBnCd,QAvBmC,GAuBxB,mBAAM,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAvBkB;;AAAA,SAyBnCW,QAzBmC,GAyBxB,MAAM;AACb,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KA3BkC;AAAA;;AAEnCI,EAAAA,iBAAiB,GAAG;AAChB,SAAKlB,KAAL,CAAWmB,SAAX;AACH;;AAyBDC,EAAAA,MAAM,GAAI;AAAE,wBAAO;AAAA,gBAAM,KAAKrB,aAAL;AAAN;AAAA;AAAA;AAAA;AAAA,YAAP;AAA0C;;AA7BnB;;AA+BtC;AAED,eAAeF,OAAO,CAAE,CAAC;AAACwB,EAAAA;AAAD,CAAD,MAAc;AAACA,EAAAA;AAAD,CAAd,CAAF,EAA0B,EAA1B,CAAP,CAAwCvB,cAAxC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport Holding from '../components/Holding'\nimport { connect } from 'react-redux'\n\nclass SongsContainer extends Component {\n\n    componentDidMount() {\n        this.props.fetchUser()\n    }\n\n    handleLoading = () => {\n        debugger\n        if (this.props.user.loading) {\n            return this.tempPage()\n        } else {\n            return this.authPlaylist()\n        }\n    }\n\n    authPlaylist = () => {\n        // Check user has logged in + :userId matches logged in user id\n        // If :userId does not match logged in user id, force correct user id in url and redirect PlaylistContainer\n        const isValidPlaylist = this.props.playlists.find( e => e.id === parseInt(this.props.match.params.playlistId, 10) )\n        debugger\n        return isValidPlaylist ? this.loadPage() : this.redirect()\n      }\n    redirect = () => this.props.history.push('/')\n    tempPage = () => <Holding />\n\n    loadPage = () => {\n        return <div>Playlist Songs</div>\n    } \n    \n    render () { return <div>{this.handleLoading()}</div> }\n\n};\n\nexport default connect( ({songs}) => ({songs}), {  } )(SongsContainer)"]},"metadata":{},"sourceType":"module"}