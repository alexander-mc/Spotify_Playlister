{"ast":null,"code":"export const addUser = user => {\n  return {\n    type: \"ADD_USER\",\n    user\n  };\n};\nexport const deleteUser = user => {\n  return {\n    type: \"DELETE_USER\",\n    user\n  };\n};\nexport const fetchuser = () => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_USER'\n    });\n    fetch('http://localhost:3001/logged_in', {\n      credentials: 'include'\n    }).then(response => response.json()).then(json => {\n      let user;\n      json.islogged_in ? user = {\n        isLoggedIn: true,\n        user: json.user\n      } : user = {\n        isLoggedIn: false,\n        user: {}\n      };\n      dispatch(updateuser(user));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/actions/userActions.js"],"names":["addUser","user","type","deleteUser","fetchuser","dispatch","fetch","credentials","then","response","json","islogged_in","isLoggedIn","updateuser"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAGC,IAAI,IAAI;AAC3B,SAAO;AAAEC,IAAAA,IAAI,EAAE,UAAR;AAAoBD,IAAAA;AAApB,GAAP;AACH,CAFM;AAIP,OAAO,MAAME,UAAU,GAAGF,IAAI,IAAI;AAC9B,SAAO;AAAEC,IAAAA,IAAI,EAAE,aAAR;AAAuBD,IAAAA;AAAvB,GAAP;AACH,CAFM;AAIP,OAAO,MAAMG,SAAS,GAAG,MAAM;AAC3B,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAI,IAAAA,KAAK,CAAC,iCAAD,EAAoC;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAApC,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEME,IAAI,IAAI;AACV,UAAIT,IAAJ;AACAS,MAAAA,IAAI,CAACC,WAAL,GACIV,IAAI,GAAI;AAAEW,QAAAA,UAAU,EAAE,IAAd;AAAoBX,QAAAA,IAAI,EAAES,IAAI,CAACT;AAA/B,OADZ,GAEIA,IAAI,GAAI;AAAEW,QAAAA,UAAU,EAAE,KAAd;AAAqBX,QAAAA,IAAI,EAAE;AAA3B,OAFZ;AAGAI,MAAAA,QAAQ,CAACQ,UAAU,CAACZ,IAAD,CAAX,CAAR;AACH,KARD;AASH,GAXD;AAYH,CAbM","sourcesContent":["export const addUser = user => {\n    return { type: \"ADD_USER\", user }\n}\n\nexport const deleteUser = user => {\n    return { type: \"DELETE_USER\", user }\n}\n\nexport const fetchuser = () => {\n    return dispatch => {\n        dispatch({type: 'LOADING_USER'});\n        fetch('http://localhost:3001/logged_in', { credentials: 'include' })\n        .then(response => response.json())\n        .then(json => {\n            let user;\n            json.islogged_in ?\n                user = ({ isLoggedIn: true, user: json.user }) :\n                user = ({ isLoggedIn: false, user: {} })\n            dispatch(updateuser(user))\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}