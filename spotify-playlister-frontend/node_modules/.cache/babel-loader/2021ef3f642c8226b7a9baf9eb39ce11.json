{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { v4 as uuid } from \"uuid\";\nconst rootReducer = combineReducers({\n  user: userReducer,\n  playlists: playlistsReducer,\n  songs: songsReducer,\n  searchResults: searchReducer\n});\nexport default rootReducer;\n\nfunction userReducer(state = {\n  id: '',\n  username: '',\n  isLoggedIn: false,\n  loading: true\n}, action) {\n  switch (action.type) {\n    case \"LOADING_USER\":\n      return { ...state,\n        loading: true\n      };\n\n    case \"LOGIN_USER\":\n      return { ...action.user,\n        loading: false\n      };\n\n    case \"LOGOUT_USER\":\n      return {\n        isLoggedIn: false,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction playlistsReducer(state = [], action) {\n  switch (action.type) {\n    case \"ADD_PLAYLIST\":\n      return [...state, action.playlist];\n    // Alternative code: Only add a playlist if it is not already in state\n    // return state.find(e => e.id === action.playlist.id) ? [...state] : [...state, action.playlist];    \n\n    case \"DELETE_PLAYLIST\":\n      return state.filter(playlist => playlist.id !== action.id);\n\n    case \"RESET_PLAYLIST_STORE\":\n      return action.playlists;\n\n    default:\n      return state;\n  }\n}\n\nfunction songsReducer(state = [], action) {\n  debugger;\n\n  switch (action.type) {\n    case \"ADD_SONG\":\n      debugger; // const index = state.findIndex( s => s.spotify_id === action.song.spotify_id )\n      // const song = state[index]\n      // if ( index !== -1 ) {\n      // if (song ) {\n      // state[index].playlistIds = action.song.playlistIds // does this mutate state? YES\n      //     return [\n      //         ...state.slice(0, index),\n      //         { ...song, playlistIds: action.song.playlistIds },\n      //         // Alternative code:\n      //         // Object.assign({}, song, {playlistIds: action.song.playlistIds}),\n      //         ...state.slice(index + 1)\n      //     ]\n      // } else {\n\n      return [...state, action.song];\n    // }\n\n    case \"UPDATE_SONG_PLAYLIST_IDS\":\n      const index = state.findIndex(s => s.spotify_id === action.song.spotify_id);\n      const song = state[index];\n      return [...state.slice(0, index), { ...song,\n        ...action.song\n      }, // Alternative code:\n      // Object.assign({}, song, {playlistIds: action.song.playlistIds}),\n      ...state.slice(index + 1)];\n\n    case \"DELETE_SONG\":\n      return state.filter(song => song.id !== action.id);\n\n    case \"RESET_SONG_STORE\":\n      return action.songs;\n\n    default:\n      return state;\n  }\n}\n\nfunction searchReducer(state = {\n  songs: [],\n  message: ''\n}, action) {\n  switch (action.type) {\n    case \"ADD_SEARCH_RESULTS\":\n      return {\n        songs: action.searchResults,\n        message: ''\n      };\n\n    case \"DELETE_SEARCH_RESULTS\":\n      return {\n        songs: [],\n        message: ''\n      };\n\n    case \"ADD_SEARCH_MESSAGE\":\n      return { ...state,\n        message: action.message\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/reducers/managePlaylist.js"],"names":["combineReducers","v4","uuid","rootReducer","user","userReducer","playlists","playlistsReducer","songs","songsReducer","searchResults","searchReducer","state","id","username","isLoggedIn","loading","action","type","playlist","filter","song","index","findIndex","s","spotify_id","slice","message"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\"\nimport { v4 as uuid } from \"uuid\"; \n\nconst rootReducer = combineReducers({\n    user: userReducer,\n    playlists: playlistsReducer,\n    songs: songsReducer,\n    searchResults: searchReducer\n})\n\nexport default rootReducer;\n\nfunction userReducer(state = { id:'', username: '', isLoggedIn: false, loading: true }, action) {\n    \n    switch (action.type) {\n        case \"LOADING_USER\":\n            return { ...state, loading: true }\n        \n        case \"LOGIN_USER\":\n            return { ...action.user, loading: false }\n\n        case \"LOGOUT_USER\":\n            return { isLoggedIn: false, loading: false }\n\n        default:\n            return state\n    }\n}\n\nfunction playlistsReducer(state = [], action) {\n\n    switch (action.type) {\n\n        case \"ADD_PLAYLIST\":\n            return [...state, action.playlist]\n            // Alternative code: Only add a playlist if it is not already in state\n            // return state.find(e => e.id === action.playlist.id) ? [...state] : [...state, action.playlist];    \n\n        case \"DELETE_PLAYLIST\": \n            return state.filter( playlist => playlist.id !== action.id );\n            \n        case \"RESET_PLAYLIST_STORE\":\n            return action.playlists;\n\n        default:\n            return state;\n    }\n}\n\nfunction songsReducer(state = [], action) {\n    debugger\n    switch (action.type) {\n        case \"ADD_SONG\":\n            debugger\n            // const index = state.findIndex( s => s.spotify_id === action.song.spotify_id )\n            // const song = state[index]\n\n            // if ( index !== -1 ) {\n            // if (song ) {\n                // state[index].playlistIds = action.song.playlistIds // does this mutate state? YES\n            //     return [\n            //         ...state.slice(0, index),\n            //         { ...song, playlistIds: action.song.playlistIds },\n            //         // Alternative code:\n            //         // Object.assign({}, song, {playlistIds: action.song.playlistIds}),\n            //         ...state.slice(index + 1)\n            //     ]\n\n            // } else {\n                return [...state, action.song]\n            // }\n\n        case \"UPDATE_SONG_PLAYLIST_IDS\":\n            const index = state.findIndex( s => s.spotify_id === action.song.spotify_id )\n            const song = state[index]\n\n            return [\n                ...state.slice(0, index),\n                { ...song, ...action.song },\n                // Alternative code:\n                // Object.assign({}, song, {playlistIds: action.song.playlistIds}),\n                ...state.slice(index + 1)\n            ]\n\n        case \"DELETE_SONG\":\n            return state.filter( song => song.id !== action.id )\n\n        case \"RESET_SONG_STORE\":\n            return action.songs;\n\n        default:\n            return state\n    }\n}\n\nfunction searchReducer(state = { songs: [], message: '' }, action) {\n    switch (action.type) {\n        case \"ADD_SEARCH_RESULTS\":\n            return { songs: action.searchResults, message: ''}\n\n        case \"DELETE_SEARCH_RESULTS\":\n            return { songs: [], message: '' }\n\n        case \"ADD_SEARCH_MESSAGE\":\n            return { ...state, message: action.message }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}