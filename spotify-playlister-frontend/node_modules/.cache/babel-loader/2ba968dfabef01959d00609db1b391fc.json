{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/SongsContainer.js\";\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Holding from '../components/Holding';\nimport { connect } from 'react-redux';\nimport NoMatch from '../components/NoMatch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SongsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.authPlaylist = () => {\n      debugger;\n      const isValidPlaylist = this.props.playlists.find(e => e.id === parseInt(this.props.match.params.playlistId, 10));\n      return isValidPlaylist ? this.loadPage() : this.redirect();\n    };\n\n    this.redirect = () => this.props.history.push(`/users/${this.props.user.id}/playlists`);\n\n    this.loadPage = () => {\n      const {\n        match\n      } = this.props;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: match.params.playlistId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.authPlaylist()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this);\n  }\n\n}\n\nSongsContainer.playlist = SongsContainer.props.playlists.find(e => e.id === parseInt(SongsContainer.props.match.params.playlistId, 10));\n;\nexport default connect(({\n  songs\n}) => ({\n  songs\n}), {})(SongsContainer);","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/SongsContainer.js"],"names":["React","Component","Route","Holding","connect","NoMatch","SongsContainer","authPlaylist","isValidPlaylist","props","playlists","find","e","id","parseInt","match","params","playlistId","loadPage","redirect","history","push","user","render","playlist","songs"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,cAAN,SAA6BL,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAiBnCM,YAjBmC,GAiBpB,MAAM;AACjB;AACA,YAAMC,eAAe,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,IAArB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASC,QAAQ,CAAC,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBC,UAAzB,EAAqC,EAArC,CAAjD,CAAxB;AACA,aAAOT,eAAe,GAAG,KAAKU,QAAL,EAAH,GAAqB,KAAKC,QAAL,EAA3C;AACH,KArBkC;;AAAA,SAuBnCA,QAvBmC,GAuBxB,MAAM,KAAKV,KAAL,CAAWW,OAAX,CAAmBC,IAAnB,CAAyB,UAAS,KAAKZ,KAAL,CAAWa,IAAX,CAAgBT,EAAG,YAArD,CAvBkB;;AAAA,SAyBnCK,QAzBmC,GAyBxB,MAAM;AACb,YAAM;AAAEH,QAAAA;AAAF,UAAY,KAAKN,KAAvB;AAEA,0BACI;AAAA,+BAEI;AAAA,oBAAKM,KAAK,CAACC,MAAN,CAAaC;AAAlB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAaH,KAzCkC;AAAA;;AA2CnCM,EAAAA,MAAM,GAAI;AAAE,wBAAO;AAAA,gBAAM,KAAKhB,YAAL;AAAN;AAAA;AAAA;AAAA;AAAA,YAAP;AAAyC;;AA3ClB;;AAAjCD,c,CAeKkB,Q,GAfLlB,cAegB,CAAKG,KAAL,CAAWC,SAAX,CAAqBC,IAArB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASC,QAAQ,CAfjER,cAekE,CAAKG,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBC,UAAzB,EAAqC,EAArC,CAAjD,C;AA8BrB;AAED,eAAeb,OAAO,CAAE,CAAC;AAACqB,EAAAA;AAAD,CAAD,MAAc;AAACA,EAAAA;AAAD,CAAd,CAAF,EAA0B,EAA1B,CAAP,CAAwCnB,cAAxC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport Holding from '../components/Holding'\nimport { connect } from 'react-redux'\nimport NoMatch from '../components/NoMatch'\n\nclass SongsContainer extends Component {\n\n    // componentDidMount() {\n    //     debugger\n    //     // this.props.fetchUser()\n    // }\n\n    // handleLoading = () => {\n    //     // if (this.props.user.loading) {\n    //     //     return this.tempPage()\n    //     // } else {\n    //         return this.authPlaylist()\n    //     // }\n    // }\n\n    static playlist = this.props.playlists.find( e => e.id === parseInt(this.props.match.params.playlistId, 10) )\n\n    authPlaylist = () => {\n        debugger\n        const isValidPlaylist = this.props.playlists.find( e => e.id === parseInt(this.props.match.params.playlistId, 10) )\n        return isValidPlaylist ? this.loadPage() : this.redirect()\n    }\n\n    redirect = () => this.props.history.push(`/users/${this.props.user.id}/playlists`)\n\n    loadPage = () => {\n        const { match } = this.props\n\n        return (\n            <div>\n\n                <h3>{match.params.playlistId}</h3>\n\n                {/* <Route \n                exact path={`${this.props.match.url}`}\n                render={ () => (\n                    <div>Test</div>\n                )}\n                /> */}\n            </div>\n        )\n    }\n    \n    render () { return <div>{this.authPlaylist()}</div> }\n\n};\n\nexport default connect( ({songs}) => ({songs}), {  } )(SongsContainer)"]},"metadata":{},"sourceType":"module"}