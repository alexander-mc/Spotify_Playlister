{"ast":null,"code":"import { resetPlaylistStore } from \"./playlistActions\";\nimport { resetSongStore } from \"./songActions\";\nexport const loginUser = user => {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  };\n};\nexport const logoutUser = () => {\n  return {\n    type: \"LOGOUT_USER\"\n  };\n};\nexport const fetchUser = () => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_USER'\n    });\n    fetch('http://localhost:3001/logged_in', {\n      credentials: 'include'\n    }).then(response => response.json()).then(json => {\n      if (json.user.isLoggedIn) {\n        // Reset playlist store (this is necessary when user logs out or during multiple redirects, such as if user manually enters incorrect playlistId url param\n        dispatch(resetPlaylistStore(json.playlists));\n        dispatch(resetSongStore(json.songs));\n      } // Must keep below for loop (otherwise, for loop will occur after authPlaylist, resulting in an undesired redirect)\n\n\n      dispatch(loginUser(json.user));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/actions/userActions.js"],"names":["resetPlaylistStore","resetSongStore","loginUser","user","type","logoutUser","fetchUser","dispatch","fetch","credentials","then","response","json","isLoggedIn","playlists","songs"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,mBAAnC;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAO,MAAMC,SAAS,GAAGC,IAAI,IAAI;AAC7B,SAAO;AAAEC,IAAAA,IAAI,EAAE,YAAR;AAAsBD,IAAAA;AAAtB,GAAP;AACH,CAFM;AAIP,OAAO,MAAME,UAAU,GAAG,MAAM;AAC5B,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAR,GAAP;AACH,CAFM;AAIP,OAAO,MAAME,SAAS,GAAG,MAAM;AAC3B,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAI,IAAAA,KAAK,CAAC,iCAAD,EAAoC;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAApC,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEME,IAAI,IAAI;AAEV,UAAIA,IAAI,CAACT,IAAL,CAAUU,UAAd,EAA0B;AACtB;AACAN,QAAAA,QAAQ,CAACP,kBAAkB,CAACY,IAAI,CAACE,SAAN,CAAnB,CAAR;AACAP,QAAAA,QAAQ,CAACN,cAAc,CAACW,IAAI,CAACG,KAAN,CAAf,CAAR;AACH,OANS,CAQV;;;AACAR,MAAAA,QAAQ,CAACL,SAAS,CAACU,IAAI,CAACT,IAAN,CAAV,CAAR;AACH,KAZD;AAaH,GAfD;AAgBH,CAjBM","sourcesContent":["import { resetPlaylistStore } from \"./playlistActions\"\nimport { resetSongStore } from \"./songActions\"\n\nexport const loginUser = user => {\n    return { type: \"LOGIN_USER\", user }\n}\n\nexport const logoutUser = () => {\n    return { type: \"LOGOUT_USER\" }\n}\n\nexport const fetchUser = () => {\n    return dispatch => {\n        dispatch({type: 'LOADING_USER'});   \n        fetch('http://localhost:3001/logged_in', { credentials: 'include' })\n        .then(response => response.json())\n        .then(json => {\n            \n            if (json.user.isLoggedIn) {\n                // Reset playlist store (this is necessary when user logs out or during multiple redirects, such as if user manually enters incorrect playlistId url param\n                dispatch(resetPlaylistStore(json.playlists))\n                dispatch(resetSongStore(json.songs))\n            }\n\n            // Must keep below for loop (otherwise, for loop will occur after authPlaylist, resulting in an undesired redirect)\n            dispatch(loginUser(json.user))\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}