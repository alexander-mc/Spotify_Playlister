{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { v4 as uuid } from \"uuid\";\nconst rootReducer = combineReducers({\n  user: userReducer,\n  playlists: playlistsReducer,\n  songs: songsReducer\n});\nexport default rootReducer; // TODO: MODIFY REDUCERS\n\nfunction userReducer(state = {\n  id: '',\n  username: '',\n  isLoggedIn: false,\n  loading: true\n}, action) {\n  switch (action.type) {\n    case \"LOADING_USER\":\n      return { ...state,\n        loading: true\n      };\n\n    case \"LOGIN_USER\":\n      return { ...action.user,\n        loading: false\n      };\n\n    case \"LOGOUT_USER\":\n      return {\n        isLoggedIn: false,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction playlistsReducer(state = [], action) {\n  switch (action.type) {\n    case \"ADD_PLAYLIST\":\n      debugger; // Only add a playlist if it is not already in state\n      ///// This fixes a bug, which occurs when a user changes the playlistId url param to an incorrect playlistId value. When this happens, the program redirects to different components, each time calling fetchUser from componentDidMount. This results in adding playlists that may already exist. When a user refreshes the browser, the store is cleared and this is not an issue.\n\n      return state.find(e => e.id === action.playlist.id) ? [...state] : [...state, action.playlist];\n\n    case \"DELETE_PLAYLIST\":\n      return state.filter(playlist => playlist.id !== action.id);\n\n    default:\n      return state;\n  }\n}\n\nfunction songsReducer(state = [], action) {\n  switch (action.type) {\n    case \"ADD_SONG\":\n      const review = {\n        text: action.review.text,\n        restaurantId: action.review.restaurantId,\n        id: uuid()\n      };\n      return [...state, review];\n    // return [...state, {id: cuid(), text: action.text, restaurantId: action.restaurantId}]\n\n    case \"DELETE_SONG\":\n      return state.filter(r => r.id !== action.id);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/reducers/managePlaylist.js"],"names":["combineReducers","v4","uuid","rootReducer","user","userReducer","playlists","playlistsReducer","songs","songsReducer","state","id","username","isLoggedIn","loading","action","type","find","e","playlist","filter","review","text","restaurantId","r"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAChCI,EAAAA,IAAI,EAAEC,WAD0B;AAEhCC,EAAAA,SAAS,EAAEC,gBAFqB;AAGhCC,EAAAA,KAAK,EAAEC;AAHyB,CAAD,CAAnC;AAMA,eAAeN,WAAf,C,CAEA;;AAEA,SAASE,WAAT,CAAqBK,KAAK,GAAG;AAAEC,EAAAA,EAAE,EAAC,EAAL;AAASC,EAAAA,QAAQ,EAAE,EAAnB;AAAuBC,EAAAA,UAAU,EAAE,KAAnC;AAA0CC,EAAAA,OAAO,EAAE;AAAnD,CAA7B,EAAwFC,MAAxF,EAAgG;AAE5F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,aAAO,EAAE,GAAGN,KAAL;AAAYI,QAAAA,OAAO,EAAE;AAArB,OAAP;;AAEJ,SAAK,YAAL;AACI,aAAO,EAAE,GAAGC,MAAM,CAACX,IAAZ;AAAkBU,QAAAA,OAAO,EAAE;AAA3B,OAAP;;AAEJ,SAAK,aAAL;AACI,aAAO;AAAED,QAAAA,UAAU,EAAE,KAAd;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OAAP;;AAEJ;AACI,aAAOJ,KAAP;AAXR;AAaH;;AAED,SAASH,gBAAT,CAA0BG,KAAK,GAAG,EAAlC,EAAsCK,MAAtC,EAA8C;AAE1C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,eADJ,CAEI;AACA;;AACA,aAAON,KAAK,CAACO,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACP,EAAF,KAASI,MAAM,CAACI,QAAP,CAAgBR,EAAzC,IAA+C,CAAC,GAAGD,KAAJ,CAA/C,GAA4D,CAAC,GAAGA,KAAJ,EAAWK,MAAM,CAACI,QAAlB,CAAnE;;AAEJ,SAAK,iBAAL;AACI,aAAOT,KAAK,CAACU,MAAN,CAAcD,QAAQ,IAAIA,QAAQ,CAACR,EAAT,KAAgBI,MAAM,CAACJ,EAAjD,CAAP;;AAEJ;AACI,aAAOD,KAAP;AAXR;AAaH;;AAED,SAASD,YAAT,CAAsBC,KAAK,GAAG,EAA9B,EAAkCK,MAAlC,EAA0C;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,YAAMK,MAAM,GAAG;AAAEC,QAAAA,IAAI,EAAEP,MAAM,CAACM,MAAP,CAAcC,IAAtB;AAA4BC,QAAAA,YAAY,EAAER,MAAM,CAACM,MAAP,CAAcE,YAAxD;AAAsEZ,QAAAA,EAAE,EAAET,IAAI;AAA9E,OAAf;AACA,aAAO,CAAC,GAAGQ,KAAJ,EAAWW,MAAX,CAAP;AACA;;AAEJ,SAAK,aAAL;AACI,aAAOX,KAAK,CAACU,MAAN,CAAaI,CAAC,IAAIA,CAAC,CAACb,EAAF,KAASI,MAAM,CAACJ,EAAlC,CAAP;;AAEJ;AACI,aAAOD,KAAP;AAVR;AAYH","sourcesContent":["import { combineReducers } from \"redux\"\nimport { v4 as uuid } from \"uuid\"; \n\nconst rootReducer = combineReducers({\n    user: userReducer,\n    playlists: playlistsReducer,\n    songs: songsReducer\n})\n\nexport default rootReducer;\n\n// TODO: MODIFY REDUCERS\n\nfunction userReducer(state = { id:'', username: '', isLoggedIn: false, loading: true }, action) {\n    \n    switch (action.type) {\n        case \"LOADING_USER\":\n            return { ...state, loading: true }\n        \n        case \"LOGIN_USER\":\n            return { ...action.user, loading: false }\n\n        case \"LOGOUT_USER\":\n            return { isLoggedIn: false, loading: false }\n\n        default:\n            return state\n    }\n}\n\nfunction playlistsReducer(state = [], action) {\n\n    switch (action.type) {\n        case \"ADD_PLAYLIST\":\n            debugger\n            // Only add a playlist if it is not already in state\n            ///// This fixes a bug, which occurs when a user changes the playlistId url param to an incorrect playlistId value. When this happens, the program redirects to different components, each time calling fetchUser from componentDidMount. This results in adding playlists that may already exist. When a user refreshes the browser, the store is cleared and this is not an issue.\n            return state.find(e => e.id === action.playlist.id) ? [...state] : [...state, action.playlist]\n            \n        case \"DELETE_PLAYLIST\":\n            return state.filter( playlist => playlist.id !== action.id )\n            \n        default:\n            return state;\n    }\n}\n\nfunction songsReducer(state = [], action) {\n    switch (action.type) {\n        case \"ADD_SONG\":\n            const review = { text: action.review.text, restaurantId: action.review.restaurantId, id: uuid() };\n            return [...state, review]\n            // return [...state, {id: cuid(), text: action.text, restaurantId: action.restaurantId}]\n\n        case \"DELETE_SONG\":\n            return state.filter(r => r.id !== action.id)\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}