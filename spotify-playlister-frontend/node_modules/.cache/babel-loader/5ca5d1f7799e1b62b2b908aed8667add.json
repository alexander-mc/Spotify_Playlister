{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/songs/Search.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport SearchResults from './SearchResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Search extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: \"\",\n      searchResults: []\n    };\n\n    this.accessSpotifyAPI = () => {\n      // Authorize user via Spotify's Client Credientials authorization flow\n      // For more info: https://github.com/spotify/web-api-auth-examples\n      const request = require('request');\n\n      const authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + new Buffer(Search.CLIENT_ID + ':' + Search.CLIENT_SECRET).toString('base64')\n        },\n        form: {\n          grant_type: 'client_credentials'\n        },\n        json: true\n      };\n      request.post(authOptions, function (error, response, body) {\n        if (!error && response.statusCode === 200) {\n          // Access Spotify API via Spotify Web API JS wrapper\n          // For more info: https://github.com/JMPerez/spotify-web-api-js\n          const spotify = new SpotifyWebApi();\n          const token = body.access_token;\n          spotify.setAccessToken(token);\n          spotify.searchTracks('Love', {\n            limit: 10\n          }).then(function (data) {\n            console.log('Search by \"Love\"', data);\n          }, function (err) {\n            console.error(err);\n          }); // const options = {\n          //   url: 'https://api.spotify.com/v1/users/jmperezperez',\n          //   headers: {\n          //     'Authorization': 'Bearer ' + token\n          //   },\n          //   json: true\n          // };\n          // request.get(options, function(error, response, body) {\n          //   console.log(body);\n          // });\n        }\n      });\n    };\n\n    this.handleChange = e => this.setState({\n      query: e.target.value\n    });\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        query: ''\n      });\n      this.accessSpotifyAPI();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleChange,\n          value: this.state.query\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nSearch.CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nSearch.CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n;\nexport default Search;","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/songs/Search.js"],"names":["React","Component","SpotifyWebApi","SearchResults","Search","state","query","searchResults","accessSpotifyAPI","request","require","authOptions","url","headers","Buffer","CLIENT_ID","CLIENT_SECRET","toString","form","grant_type","json","post","error","response","body","statusCode","spotify","token","access_token","setAccessToken","searchTracks","limit","then","data","console","log","err","handleChange","e","setState","target","value","handleSubmit","preventDefault","render","process","env","REACT_APP_CLIENT_ID","REACT_APP_CLIENT_SECRET"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAAA;AAAA;AAAA,SAK3BI,KAL2B,GAKnB;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,aAAa,EAAE;AAA5B,KALmB;;AAAA,SAO3BC,gBAP2B,GAOR,MAAM;AAEvB;AACA;AACA,YAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,YAAMC,WAAW,GAAG;AAClBC,QAAAA,GAAG,EAAE,wCADa;AAElBC,QAAAA,OAAO,EAAE;AAAE,2BAAiB,WAAY,IAAIC,MAAJ,CAAWV,MAAM,CAACW,SAAP,GAAmB,GAAnB,GAAyBX,MAAM,CAACY,aAA3C,EAA0DC,QAA1D,CAAmE,QAAnE;AAA/B,SAFS;AAGlBC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAHY;AAIlBC,QAAAA,IAAI,EAAE;AAJY,OAApB;AAOAX,MAAAA,OAAO,CAACY,IAAR,CAAaV,WAAb,EAA0B,UAASW,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,EAAgC;AACxD,YAAI,CAACF,KAAD,IAAUC,QAAQ,CAACE,UAAT,KAAwB,GAAtC,EAA2C;AAEzC;AACA;AACA,gBAAMC,OAAO,GAAG,IAAIxB,aAAJ,EAAhB;AACA,gBAAMyB,KAAK,GAAGH,IAAI,CAACI,YAAnB;AAEAF,UAAAA,OAAO,CAACG,cAAR,CAAuBF,KAAvB;AACAD,UAAAA,OAAO,CAACI,YAAR,CAAqB,MAArB,EAA6B;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAA7B,EAA4CC,IAA5C,CACE,UAAUC,IAAV,EAAgB;AACdC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,IAAhC;AACD,WAHH,EAIE,UAAUG,GAAV,EAAe;AACbF,YAAAA,OAAO,CAACZ,KAAR,CAAcc,GAAd;AACD,WANH,EARyC,CAkBzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,OA9BD;AAgCD,KApD0B;;AAAA,SAuD3BC,YAvD2B,GAuDXC,CAAD,IAAO,KAAKC,QAAL,CAAc;AAAEjC,MAAAA,KAAK,EAAEgC,CAAC,CAACE,MAAF,CAASC;AAAlB,KAAd,CAvDK;;AAAA,SAwD3BC,YAxD2B,GAwDXJ,CAAD,IAAO;AAEpBA,MAAAA,CAAC,CAACK,cAAF;AACA,WAAKJ,QAAL,CAAc;AAAEjC,QAAAA,KAAK,EAAE;AAAT,OAAd;AAEA,WAAKE,gBAAL;AAED,KA/D0B;AAAA;;AAiE3BoC,EAAAA,MAAM,GAAG;AACL,wBACE;AAAA,6BACE;AAAM,QAAA,QAAQ,EAAG,KAAKF,YAAtB;AAAA,gCACE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAG,KAAKL,YAAnC;AAAkD,UAAA,KAAK,EAAE,KAAKhC,KAAL,CAAWC;AAApE;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AASH;;AA3E0B;;AAAzBF,M,CAEKW,S,GAAY8B,OAAO,CAACC,GAAR,CAAYC,mB;AAF7B3C,M,CAGKY,a,GAAgB6B,OAAO,CAACC,GAAR,CAAYE,uB;AAyEtC;AAED,eAAe5C,MAAf","sourcesContent":["import React, { Component } from 'react'\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport SearchResults from './SearchResults'\n\nclass Search extends Component {\n\n    static CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n    static CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n\n    state = { query: \"\", searchResults: [] }\n    \n    accessSpotifyAPI = () => {\n      \n      // Authorize user via Spotify's Client Credientials authorization flow\n      // For more info: https://github.com/spotify/web-api-auth-examples\n      const request = require('request')\n      \n      const authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: { 'Authorization': 'Basic ' + (new Buffer(Search.CLIENT_ID + ':' + Search.CLIENT_SECRET).toString('base64')) },\n        form: { grant_type: 'client_credentials' },\n        json: true\n      };\n      \n      request.post(authOptions, function(error, response, body) {\n        if (!error && response.statusCode === 200) {\n          \n          // Access Spotify API via Spotify Web API JS wrapper\n          // For more info: https://github.com/JMPerez/spotify-web-api-js\n          const spotify = new SpotifyWebApi();\n          const token = body.access_token;\n          \n          spotify.setAccessToken(token)\n          spotify.searchTracks('Love', { limit: 10 }).then(\n            function (data) {\n              console.log('Search by \"Love\"', data);\n            },\n            function (err) {\n              console.error(err);\n            }\n          );\n\n\n          // const options = {\n          //   url: 'https://api.spotify.com/v1/users/jmperezperez',\n          //   headers: {\n          //     'Authorization': 'Bearer ' + token\n          //   },\n          //   json: true\n          // };\n          // request.get(options, function(error, response, body) {\n          //   console.log(body);\n          // });\n        }\n      });\n\n    }\n\n\n    handleChange = (e) => this.setState({ query: e.target.value })\n    handleSubmit = (e) => {\n\n      e.preventDefault();        \n      this.setState({ query: '' })\n      \n      this.accessSpotifyAPI()\n\n    }    \n\n    render() {\n        return (\n          <div>\n            <form onSubmit={ this.handleSubmit }>\n              <input type=\"text\" onChange={ this.handleChange } value={this.state.query} />\n              <input type=\"submit\" />\n            </form>\n            {/* <SearchResults /> */}\n          </div>\n        );\n    }\n};\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}