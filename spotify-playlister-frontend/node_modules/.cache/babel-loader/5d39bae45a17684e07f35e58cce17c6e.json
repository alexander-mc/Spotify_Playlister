{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js\";\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Holding from '../components/Holding';\nimport NavBar from '../components/NavBar';\nimport Playlists from '../components/playlists/Playlists';\nimport PlaylistInput from '../components/playlists/PlaylistInput';\nimport SongsContainer from './SongsContainer';\nimport { connect } from 'react-redux';\nimport { addPlaylist, deletePlaylist } from '../actions/playlistActions';\nimport { deleteSearchResults } from '../actions/searchActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlaylistsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoading = () => this.props.user.loading ? this.tempPage() : this.authUser();\n\n    this.authUser = () => {\n      // Checks if user has logged in + :userId matches logged in user id\n      // If :userId does not match logged in user id, logged in user id is reset in url and user is redirected to PlaylistContainer\n      const isValidUser = this.props.user.id === parseInt(this.props.match.params.userId, 10);\n      return isValidUser ? this.loadPage() : this.redirect();\n    };\n\n    this.redirect = () => this.props.history.push('/');\n\n    this.tempPage = () => /*#__PURE__*/_jsxDEV(Holding, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 20\n    }, this);\n\n    this.loadPage = () => {\n      const {\n        user,\n        logoutUser,\n        match,\n        playlists,\n        addPlaylist,\n        deletePlaylist,\n        deleteSearchResults\n      } = this.props;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          user: user,\n          logoutUser: logoutUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${match.url}`,\n          render: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(PlaylistInput, { ...props,\n              user: user,\n              addPlaylist: addPlaylist\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Playlists, { ...props,\n              playlists: playlists,\n              deletePlaylist: deletePlaylist\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${match.url}/:playlistId/songs`,\n          render: props => /*#__PURE__*/_jsxDEV(SongsContainer, { ...props,\n            user: user,\n            playlists: playlists,\n            deleteSearchResults: deleteSearchResults\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.handleLoading()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 22\n    }, this);\n  }\n\n}\n\n;\nexport default connect(({\n  playlists\n}) => ({\n  playlists\n}), {\n  addPlaylist,\n  deletePlaylist,\n  deleteSearchResults\n})(PlaylistsContainer);","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js"],"names":["React","Component","Route","Holding","NavBar","Playlists","PlaylistInput","SongsContainer","connect","addPlaylist","deletePlaylist","deleteSearchResults","PlaylistsContainer","handleLoading","props","user","loading","tempPage","authUser","isValidUser","id","parseInt","match","params","userId","loadPage","redirect","history","push","logoutUser","playlists","url","componentDidMount","fetchUser","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport Holding from '../components/Holding'\nimport NavBar from '../components/NavBar'\nimport Playlists from '../components/playlists/Playlists'\nimport PlaylistInput from '../components/playlists/PlaylistInput'\nimport SongsContainer from './SongsContainer'\nimport { connect } from 'react-redux'\nimport { addPlaylist, deletePlaylist } from '../actions/playlistActions'\nimport { deleteSearchResults } from '../actions/searchActions'\n\nclass PlaylistsContainer extends Component {\n\n  componentDidMount() { this.props.fetchUser() }\n  handleLoading = () => this.props.user.loading ? this.tempPage() : this.authUser()\n  authUser = () => {\n    // Checks if user has logged in + :userId matches logged in user id\n    // If :userId does not match logged in user id, logged in user id is reset in url and user is redirected to PlaylistContainer\n    const isValidUser = this.props.user.id === parseInt(this.props.match.params.userId, 10)\n    return isValidUser ? this.loadPage() : this.redirect()\n  }\n  \n  redirect = () => this.props.history.push('/')\n  tempPage = () => <Holding />\n\n  loadPage = () => {\n    const { user, logoutUser, match, playlists, addPlaylist, deletePlaylist, deleteSearchResults } = this.props\n\n    return (\n      <div>\n        <NavBar user={user} logoutUser={logoutUser} />\n        <Route \n          exact path={`${match.url}`}\n          render={ (props) => (\n            <div>\n              <PlaylistInput {...props} user={user} addPlaylist={addPlaylist} />\n              <Playlists {...props} playlists={playlists} deletePlaylist={deletePlaylist} />\n            </div>\n          )}\n        />\n        <Route \n          path={`${match.url}/:playlistId/songs`}\n          render={ props => (\n            <SongsContainer {...props} user={user} playlists={playlists} deleteSearchResults={deleteSearchResults} /> )}\n        />\n      </div>\n    );\n  }\n\n  render () { return <div>{ this.handleLoading() }</div> }\n};\n  \nexport default connect( ({playlists}) => ({playlists}), { addPlaylist, deletePlaylist, deleteSearchResults } )(PlaylistsContainer)"]},"metadata":{},"sourceType":"module"}