{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/RegistrationsContainer.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PlaylistsContainer from '../containers/PlaylistsContainer';\nimport Index from '../components/registrations/Index';\nimport Login from '../components/registrations/Login';\nimport Signup from '../components/registrations/Signup';\nimport NoMatch from '../components/NoMatch';\nimport Logout from '../components/Logout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RegistrationsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoggedIn: false,\n      user: {}\n    };\n\n    this.getLoginStatus = () => {\n      return fetch('http://localhost:3001/logged_in', {\n        credentials: 'include' // could also use 'same-origin'\n\n      }).then(response => response.json()).then(json => {\n        if (json.logged_in) {\n          this.handleLogin(json);\n        } else {\n          this.handleLogout();\n        }\n      }).catch(error => console.log('API error:', error));\n    };\n\n    this.handleLogin = data => {\n      this.props.updateLoginInfo({\n        isLoggedIn: true,\n        user: data.user\n      });\n    };\n\n    this.handleLogout = () => {\n      console.log('logged out');\n      this.props.updateLoginInfo({\n        isLoggedIn: false,\n        user: {}\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getLoginStatus();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            render: props => /*#__PURE__*/_jsxDEV(Index, { ...props,\n              getLoginStatus: this.getLoginStatus,\n              loginInfo: this.props.loginInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/login\",\n            render: props => /*#__PURE__*/_jsxDEV(Login, { ...props,\n              updateLoginInfo: this.props.updateLoginInfo,\n              getLoginStatus: this.getLoginStatus,\n              loginInfo: this.props.loginInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/signup\",\n            render: props => /*#__PURE__*/_jsxDEV(Signup, { ...props,\n              handleLogin: this.handleLogin,\n              getLoginStatus: this.getLoginStatus,\n              loginInfo: this.props.loginInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/users/:user_id/playlists\",\n            render: props => /*#__PURE__*/_jsxDEV(PlaylistsContainer, { ...props,\n              handleLogout: this.handleLogout,\n              getLoginStatus: this.getLoginStatus,\n              loginInfo: this.props.loginInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/logout\",\n            render: () => /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"*\",\n            render: () => /*#__PURE__*/_jsxDEV(NoMatch, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = ({\n  loginInfo\n}) => ({\n  loginInfo\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateLoginInfo: loginInfo => dispatch({\n    type: \"UPDATE_LOGIN_INFO\",\n    loginInfo\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationsContainer);","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/RegistrationsContainer.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","connect","PlaylistsContainer","Index","Login","Signup","NoMatch","Logout","RegistrationsContainer","state","isLoggedIn","user","getLoginStatus","fetch","credentials","then","response","json","logged_in","handleLogin","handleLogout","catch","error","console","log","data","props","updateLoginInfo","componentDidMount","render","loginInfo","mapStateToProps","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport PlaylistsContainer from '../containers/PlaylistsContainer'\nimport Index from '../components/registrations/Index'\nimport Login from '../components/registrations/Login'\nimport Signup from '../components/registrations/Signup'\nimport NoMatch from '../components/NoMatch'\nimport Logout from '../components/Logout'\n\nclass RegistrationsContainer extends Component {\n  \n  state = {\n    isLoggedIn: false,\n    user: {}\n  }\n\n  componentDidMount() {\n    this.getLoginStatus()\n  }\n\n  getLoginStatus = () => {\n    return (\n      fetch('http://localhost:3001/logged_in', {\n        credentials: 'include' // could also use 'same-origin'\n      })\n      .then(response => response.json())\n      .then(json => {\n        if (json.logged_in) {\n          this.handleLogin(json)\n        } else {\n          this.handleLogout()\n        }\n      })\n      .catch(error => console.log('API error:', error))\n    )\n  }\n\n  handleLogin = (data) => {\n    this.props.updateLoginInfo({\n      isLoggedIn: true,\n      user: data.user\n    })\n  }\n\n  handleLogout = () => {\n    console.log('logged out')\n    this.props.updateLoginInfo({\n      isLoggedIn: false,\n      user: {}\n    })\n  }\n\n  render() {\n    return (\n      <div>\n         <Router>\n          <Switch>\n            <Route\n              exact path='/' \n              render={props => (\n              <Index {...props} getLoginStatus={this.getLoginStatus} loginInfo={this.props.loginInfo} /> )}\n            />\n            <Route \n              exact path='/login'\n              render={props => (\n              <Login {...props} updateLoginInfo={this.props.updateLoginInfo} getLoginStatus={this.getLoginStatus} loginInfo={this.props.loginInfo} /> )}\n            />\n            <Route \n              exact path='/signup' \n              render={props => (\n              <Signup {...props} handleLogin={this.handleLogin} getLoginStatus={this.getLoginStatus} loginInfo={this.props.loginInfo} /> )}\n            />\n            <Route\n              exact path='/users/:user_id/playlists'\n              render={props => (\n              <PlaylistsContainer {...props} handleLogout={this.handleLogout} getLoginStatus={this.getLoginStatus} loginInfo={this.props.loginInfo} /> )}\n            />\n            <Route exact path='/logout' render={() => <Logout /> }/>\n            <Route path='*' render={() => <NoMatch /> }/>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({loginInfo}) => ({loginInfo})\nconst mapDispatchToProps = dispatch => ({\n  updateLoginInfo: loginInfo => dispatch({ type: \"UPDATE_LOGIN_INFO\", loginInfo })\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationsContainer);\n"]},"metadata":{},"sourceType":"module"}