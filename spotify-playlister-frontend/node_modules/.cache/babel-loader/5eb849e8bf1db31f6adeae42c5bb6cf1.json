{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/songs/Search.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport SearchResults from './SearchResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Search extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: \"\",\n      searchResults: []\n    };\n\n    this.accessSpotifyAPI = query => {\n      // Authorize user via Spotify's Client Credientials authorization flow\n      // For more info: https://github.com/spotify/web-api-auth-examples\n      const request = require('request');\n\n      const authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + new Buffer(Search.CLIENT_ID + ':' + Search.CLIENT_SECRET).toString('base64')\n        },\n        form: {\n          grant_type: 'client_credentials'\n        },\n        json: true\n      };\n      request.post(authOptions, (error, response, body) => {\n        if (!error && response.statusCode === 200) {\n          // Access Spotify API via Spotify Web API JS wrapper\n          // For more info: https://github.com/JMPerez/spotify-web-api-js\n          const spotify = new SpotifyWebApi();\n          const token = body.access_token;\n          spotify.setAccessToken(token);\n          spotify.searchTracks(query, {\n            limit: 10\n          }).then(data => {\n            this.setState({\n              searchResults: data.tracks.items\n            });\n            console.log(this.state.searchResults);\n          }, err => {\n            console.error(err);\n          });\n        }\n      });\n    };\n\n    this.handleChange = e => this.setState({\n      query: e.target.value\n    });\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.accessSpotifyAPI(this.state.query);\n      this.setState({\n        query: ''\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleChange,\n          value: this.state.query\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n        songs: this.state.searchResults\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nSearch.CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nSearch.CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\nexport default Search;","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/songs/Search.js"],"names":["React","Component","SpotifyWebApi","SearchResults","Search","state","query","searchResults","accessSpotifyAPI","request","require","authOptions","url","headers","Buffer","CLIENT_ID","CLIENT_SECRET","toString","form","grant_type","json","post","error","response","body","statusCode","spotify","token","access_token","setAccessToken","searchTracks","limit","then","data","setState","tracks","items","console","log","err","handleChange","e","target","value","handleSubmit","preventDefault","render","process","env","REACT_APP_CLIENT_ID","REACT_APP_CLIENT_SECRET"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport SearchResults from './SearchResults'\n\nclass Search extends Component {\n\n  static CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n  static CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n\n  state = { query: \"\", searchResults: [] }\n  \n  accessSpotifyAPI = (query) => {\n      \n    // Authorize user via Spotify's Client Credientials authorization flow\n    // For more info: https://github.com/spotify/web-api-auth-examples\n    const request = require('request')      \n    const authOptions = {\n      url: 'https://accounts.spotify.com/api/token',\n      headers: { 'Authorization': 'Basic ' + (new Buffer(Search.CLIENT_ID + ':' + Search.CLIENT_SECRET).toString('base64')) },\n      form: { grant_type: 'client_credentials' },\n      json: true\n    };\n      \n    request.post(authOptions, (error, response, body) => {\n      if (!error && response.statusCode === 200) {\n        \n        // Access Spotify API via Spotify Web API JS wrapper\n        // For more info: https://github.com/JMPerez/spotify-web-api-js\n        const spotify = new SpotifyWebApi();\n        const token = body.access_token;\n        \n        spotify.setAccessToken(token)\n        spotify.searchTracks(query, { limit: 10 }).then(\n          (data) => {\n            this.setState({ searchResults: data.tracks.items })\n            console.log(this.state.searchResults)\n          },\n          (err) => {\n            console.error(err);\n          }\n        )\n      }\n    })\n  }\n\n  handleChange = (e) => this.setState({ query: e.target.value })\n  handleSubmit = (e) => {\n    e.preventDefault();        \n    this.accessSpotifyAPI(this.state.query)\n    this.setState({ query: '' })\n  }    \n\n  render() {\n    return (\n      <div>\n        <form onSubmit={ this.handleSubmit }>\n          <input type=\"text\" onChange={ this.handleChange } value={this.state.query} />\n          <input type=\"submit\" />\n        </form>\n        <SearchResults songs={this.state.searchResults} />\n      </div>\n    )\n  }\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}