{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/RegistrationsContainer.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PlaylistsContainer from '../containers/PlaylistsContainer';\nimport Index from '../components/registrations/Index';\nimport Login from '../components/registrations/Login';\nimport Signup from '../components/registrations/Signup';\nimport NoMatch from '../components/NoMatch';\nimport Logout from '../components/Logout';\nimport { updateLoginInfo, fetchLoginInfo } from '../actions/loginActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RegistrationsContainer extends Component {\n  componentDidMount() {\n    this.fetchLoginInfo();\n  } //   fetchLoginInfo = () => {\n  //     return (\n  //       fetch('http://localhost:3001/logged_in', {\n  //         credentials: 'include' // could also use 'same-origin'\n  //       })\n  //       .then(response => response.json())\n  //       .then(json => {\n  //         json.logged_in ?\n  //         this.props.updateLoginInfo({ isLoggedIn: true, user: json.user }) :\n  //         this.props.updateLoginInfo({ isLoggedIn: false, user: {} })\n  //       })\n  //       .catch(error => console.log('API error:', error))\n  //     )\n  //   }\n\n\n  render() {\n    const {\n      loginInfo,\n      updateLoginInfo\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            render: props => /*#__PURE__*/_jsxDEV(Index, { ...props,\n              fetchLoginInfo: this.fetchLoginInfo,\n              loginInfo: loginInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/login\",\n            render: props => /*#__PURE__*/_jsxDEV(Login, { ...props,\n              fetchLoginInfo: this.fetchLoginInfo,\n              loginInfo: loginInfo,\n              updateLoginInfo: updateLoginInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/signup\",\n            render: props => /*#__PURE__*/_jsxDEV(Signup, { ...props,\n              fetchLoginInfo: this.fetchLoginInfo,\n              loginInfo: loginInfo,\n              updateLoginInfo: updateLoginInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/users/:user_id/playlists\",\n            render: props => /*#__PURE__*/_jsxDEV(PlaylistsContainer, { ...props,\n              fetchLoginInfo: this.fetchLoginInfo,\n              loginInfo: loginInfo,\n              updateLoginInfo: updateLoginInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/logout\",\n            render: () => /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"*\",\n            render: () => /*#__PURE__*/_jsxDEV(NoMatch, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n} // const mapStateToProps = ({loginInfo}) => ({loginInfo})\n// const mapDispatchToProps = dispatch => ({\n//   updateLoginInfo: loginInfo => dispatch({ type: \"UPDATE_LOGIN_INFO\", loginInfo })\n// })\n\n\nexport default connect(({\n  loginInfo\n}) => ({\n  loginInfo\n}), {\n  updateLoginInfo\n})(RegistrationsContainer);","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/RegistrationsContainer.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","connect","PlaylistsContainer","Index","Login","Signup","NoMatch","Logout","updateLoginInfo","fetchLoginInfo","RegistrationsContainer","componentDidMount","render","loginInfo","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport PlaylistsContainer from '../containers/PlaylistsContainer'\nimport Index from '../components/registrations/Index'\nimport Login from '../components/registrations/Login'\nimport Signup from '../components/registrations/Signup'\nimport NoMatch from '../components/NoMatch'\nimport Logout from '../components/Logout'\nimport { updateLoginInfo, fetchLoginInfo } from '../actions/loginActions'\n\nclass RegistrationsContainer extends Component {\n\n  componentDidMount() {\n    this.fetchLoginInfo()\n  }\n\n//   fetchLoginInfo = () => {\n//     return (\n//       fetch('http://localhost:3001/logged_in', {\n//         credentials: 'include' // could also use 'same-origin'\n//       })\n//       .then(response => response.json())\n//       .then(json => {\n//         json.logged_in ?\n//         this.props.updateLoginInfo({ isLoggedIn: true, user: json.user }) :\n//         this.props.updateLoginInfo({ isLoggedIn: false, user: {} })\n//       })\n//       .catch(error => console.log('API error:', error))\n//     )\n//   }\n\n  render() {\n    const {loginInfo, updateLoginInfo} = this.props\n\n    return (\n      <div>\n         <Router>\n          <Switch>\n            <Route\n              exact path='/' \n              render={props => (\n              <Index {...props} fetchLoginInfo={this.fetchLoginInfo} loginInfo={loginInfo} /> )}\n            />\n            <Route \n              exact path='/login'\n              render={props => (\n              <Login {...props} fetchLoginInfo={this.fetchLoginInfo} loginInfo={loginInfo} updateLoginInfo={updateLoginInfo} /> )}\n            />\n            <Route \n              exact path='/signup' \n              render={props => (\n              <Signup {...props} fetchLoginInfo={this.fetchLoginInfo} loginInfo={loginInfo} updateLoginInfo={updateLoginInfo} /> )}\n            />\n            <Route\n              exact path='/users/:user_id/playlists'\n              render={props => (\n              <PlaylistsContainer {...props} fetchLoginInfo={this.fetchLoginInfo} loginInfo={loginInfo} updateLoginInfo={updateLoginInfo} /> )}\n            />\n            <Route exact path='/logout' render={() => <Logout /> }/>\n            <Route path='*' render={() => <NoMatch /> }/>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = ({loginInfo}) => ({loginInfo})\n// const mapDispatchToProps = dispatch => ({\n//   updateLoginInfo: loginInfo => dispatch({ type: \"UPDATE_LOGIN_INFO\", loginInfo })\n// })\n\nexport default connect( ({loginInfo}) => ({loginInfo}), {updateLoginInfo} )(RegistrationsContainer);\n"]},"metadata":{},"sourceType":"module"}