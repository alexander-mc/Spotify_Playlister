{"ast":null,"code":"import SpotifyWebApi from 'spotify-web-api-js';\nexport const addSong = song => {\n  return {\n    type: \"ADD_SONG\",\n    song\n  };\n};\nexport const deleteSong = clientId => {\n  return {\n    type: \"DELETE_SONG\",\n    clientId\n  };\n};\nexport const resetSongStore = songs => {\n  return {\n    type: \"RESET_SONG_STORE\",\n    songs\n  };\n};\nexport const fetchSongs = query => {\n  CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n  CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n  return dispatch => {\n    // Some dispatch\n    // Authorize user via Spotify's Client Credientials authorization flow\n    // For more info: https://github.com/spotify/web-api-auth-examples\n    const request = require('request');\n\n    const authOptions = {\n      url: 'https://accounts.spotify.com/api/token',\n      headers: {\n        'Authorization': 'Basic ' + new Buffer(Search.CLIENT_ID + ':' + Search.CLIENT_SECRET).toString('base64')\n      },\n      form: {\n        grant_type: 'client_credentials'\n      },\n      json: true\n    };\n    request.post(authOptions, (error, response, body) => {\n      if (!error && response.statusCode === 200) {\n        // Access Spotify API via Spotify Web API JS wrapper\n        // For more info: https://github.com/JMPerez/spotify-web-api-js\n        const spotify = new SpotifyWebApi();\n        const token = body.access_token;\n        spotify.setAccessToken(token);\n        spotify.searchTracks(query, {\n          limit: 3\n        }).then(data => {\n          data.tracks.items.length > 0 ? this.setState({\n            searchResults: data.tracks.items\n          }) : this.setState({\n            errors: \"Sorry, we could not find any songs.\"\n          });\n          console.log(this.state.searchResults);\n        }, err => {\n          console.error(err);\n        });\n      }\n    });\n  };\n}; // accessSpotifyAPI = (query) => {\n//     // Authorize user via Spotify's Client Credientials authorization flow\n//     // For more info: https://github.com/spotify/web-api-auth-examples\n//     const request = require('request')      \n//     const authOptions = {\n//       url: 'https://accounts.spotify.com/api/token',\n//       headers: { 'Authorization': 'Basic ' + (new Buffer(Search.CLIENT_ID + ':' + Search.CLIENT_SECRET).toString('base64')) },\n//       form: { grant_type: 'client_credentials' },\n//       json: true\n//     };\n//     request.post(authOptions, (error, response, body) => {\n//       if (!error && response.statusCode === 200) {\n//         // Access Spotify API via Spotify Web API JS wrapper\n//         // For more info: https://github.com/JMPerez/spotify-web-api-js\n//         const spotify = new SpotifyWebApi();\n//         const token = body.access_token;\n//         spotify.setAccessToken(token)\n//         spotify.searchTracks(query, { limit: 3 }).then(\n//           (data) => {\n//             data.tracks.items.length > 0 ?\n//               this.setState( {searchResults: data.tracks.items} ) :\n//               this.setState( {errors: \"Sorry, we could not find any songs.\"} )\n//             console.log(this.state.searchResults)\n//           },\n//           (err) => {\n//             console.error(err);\n//           }\n//         )\n//       }\n//     })\n//   }","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/actions/songActions.js"],"names":["SpotifyWebApi","addSong","song","type","deleteSong","clientId","resetSongStore","songs","fetchSongs","query","CLIENT_ID","process","env","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","dispatch","request","require","authOptions","url","headers","Buffer","Search","toString","form","grant_type","json","post","error","response","body","statusCode","spotify","token","access_token","setAccessToken","searchTracks","limit","then","data","tracks","items","length","setState","searchResults","errors","console","log","state","err"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AAEA,OAAO,MAAMC,OAAO,GAAGC,IAAI,IAAI;AAC3B,SAAO;AAAEC,IAAAA,IAAI,EAAE,UAAR;AAAoBD,IAAAA;AAApB,GAAP;AACH,CAFM;AAIP,OAAO,MAAME,UAAU,GAAGC,QAAQ,IAAI;AAClC,SAAO;AAAEF,IAAAA,IAAI,EAAE,aAAR;AAAuBE,IAAAA;AAAvB,GAAP;AACH,CAFM;AAIP,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAI;AACnC,SAAO;AAAEJ,IAAAA,IAAI,EAAE,kBAAR;AAA4BI,IAAAA;AAA5B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAE/BC,EAAAA,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAxB;AACAC,EAAAA,aAAa,GAAGH,OAAO,CAACC,GAAR,CAAYG,uBAA5B;AAEA,SAAOC,QAAQ,IAAI;AAEnB;AAEA;AACA;AACA,UAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,GAAG,EAAE,wCADa;AAElBC,MAAAA,OAAO,EAAE;AAAE,yBAAiB,WAAY,IAAIC,MAAJ,CAAWC,MAAM,CAACb,SAAP,GAAmB,GAAnB,GAAyBa,MAAM,CAACT,aAA3C,EAA0DU,QAA1D,CAAmE,QAAnE;AAA/B,OAFS;AAGlBC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAHY;AAIlBC,MAAAA,IAAI,EAAE;AAJY,KAApB;AAOAV,IAAAA,OAAO,CAACW,IAAR,CAAaT,WAAb,EAA0B,CAACU,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;AACnD,UAAI,CAACF,KAAD,IAAUC,QAAQ,CAACE,UAAT,KAAwB,GAAtC,EAA2C;AAEzC;AACA;AACA,cAAMC,OAAO,GAAG,IAAIjC,aAAJ,EAAhB;AACA,cAAMkC,KAAK,GAAGH,IAAI,CAACI,YAAnB;AAEAF,QAAAA,OAAO,CAACG,cAAR,CAAuBF,KAAvB;AACAD,QAAAA,OAAO,CAACI,YAAR,CAAqB5B,KAArB,EAA4B;AAAE6B,UAAAA,KAAK,EAAE;AAAT,SAA5B,EAA0CC,IAA1C,CACGC,IAAD,IAAU;AACRA,UAAAA,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBC,MAAlB,GAA2B,CAA3B,GACE,KAAKC,QAAL,CAAe;AAACC,YAAAA,aAAa,EAAEL,IAAI,CAACC,MAAL,CAAYC;AAA5B,WAAf,CADF,GAEE,KAAKE,QAAL,CAAe;AAACE,YAAAA,MAAM,EAAE;AAAT,WAAf,CAFF;AAGAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWJ,aAAvB;AACD,SANH,EAOGK,GAAD,IAAS;AACPH,UAAAA,OAAO,CAAClB,KAAR,CAAcqB,GAAd;AACD,SATH;AAWD;AACF,KArBD;AAuBC,GArCD;AAsCH,CA3CM,C,CA8CP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import SpotifyWebApi from 'spotify-web-api-js';\n\nexport const addSong = song => {\n    return { type: \"ADD_SONG\", song }\n}\n\nexport const deleteSong = clientId => {\n    return { type: \"DELETE_SONG\", clientId }\n}\n\nexport const resetSongStore = songs => {\n    return { type: \"RESET_SONG_STORE\", songs }\n}\n\nexport const fetchSongs = query => {\n\n    CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n    CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n\n    return dispatch => {\n    \n    // Some dispatch\n    \n    // Authorize user via Spotify's Client Credientials authorization flow\n    // For more info: https://github.com/spotify/web-api-auth-examples\n    const request = require('request')      \n    const authOptions = {\n      url: 'https://accounts.spotify.com/api/token',\n      headers: { 'Authorization': 'Basic ' + (new Buffer(Search.CLIENT_ID + ':' + Search.CLIENT_SECRET).toString('base64')) },\n      form: { grant_type: 'client_credentials' },\n      json: true\n    };\n      \n    request.post(authOptions, (error, response, body) => {\n      if (!error && response.statusCode === 200) {\n        \n        // Access Spotify API via Spotify Web API JS wrapper\n        // For more info: https://github.com/JMPerez/spotify-web-api-js\n        const spotify = new SpotifyWebApi();\n        const token = body.access_token;\n        \n        spotify.setAccessToken(token)\n        spotify.searchTracks(query, { limit: 3 }).then(\n          (data) => {\n            data.tracks.items.length > 0 ?\n              this.setState( {searchResults: data.tracks.items} ) :\n              this.setState( {errors: \"Sorry, we could not find any songs.\"} )\n            console.log(this.state.searchResults)\n          },\n          (err) => {\n            console.error(err);\n          }\n        )\n      }\n    })\n\n    }\n}\n\n\n// accessSpotifyAPI = (query) => {\n      \n//     // Authorize user via Spotify's Client Credientials authorization flow\n//     // For more info: https://github.com/spotify/web-api-auth-examples\n//     const request = require('request')      \n//     const authOptions = {\n//       url: 'https://accounts.spotify.com/api/token',\n//       headers: { 'Authorization': 'Basic ' + (new Buffer(Search.CLIENT_ID + ':' + Search.CLIENT_SECRET).toString('base64')) },\n//       form: { grant_type: 'client_credentials' },\n//       json: true\n//     };\n      \n//     request.post(authOptions, (error, response, body) => {\n//       if (!error && response.statusCode === 200) {\n        \n//         // Access Spotify API via Spotify Web API JS wrapper\n//         // For more info: https://github.com/JMPerez/spotify-web-api-js\n//         const spotify = new SpotifyWebApi();\n//         const token = body.access_token;\n        \n//         spotify.setAccessToken(token)\n//         spotify.searchTracks(query, { limit: 3 }).then(\n//           (data) => {\n//             data.tracks.items.length > 0 ?\n//               this.setState( {searchResults: data.tracks.items} ) :\n//               this.setState( {errors: \"Sorry, we could not find any songs.\"} )\n//             console.log(this.state.searchResults)\n//           },\n//           (err) => {\n//             console.error(err);\n//           }\n//         )\n//       }\n//     })\n//   }"]},"metadata":{},"sourceType":"module"}