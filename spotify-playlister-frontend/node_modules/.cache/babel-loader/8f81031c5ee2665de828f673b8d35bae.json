{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { v4 as uuid } from \"uuid\";\nconst rootReducer = combineReducers({\n  user: userReducer,\n  playlists: playlistsReducer,\n  songs: songsReducer,\n  searchResults: searchReducer\n});\nexport default rootReducer;\n\nfunction userReducer(state = {\n  id: '',\n  username: '',\n  isLoggedIn: false,\n  loading: true\n}, action) {\n  switch (action.type) {\n    case \"LOADING_USER\":\n      return { ...state,\n        loading: true\n      };\n\n    case \"LOGIN_USER\":\n      return { ...action.user,\n        loading: false\n      };\n\n    case \"LOGOUT_USER\":\n      return {\n        isLoggedIn: false,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction playlistsReducer(state = [], action) {\n  switch (action.type) {\n    case \"ADD_PLAYLIST\":\n      return [...state, action.playlist];\n    // Alternative code: Only add a playlist if it is not already in state\n    // return state.find(e => e.id === action.playlist.id) ? [...state] : [...state, action.playlist];    \n\n    case \"DELETE_PLAYLIST\":\n      return state.filter(playlist => playlist.id !== action.id);\n\n    case \"RESET_PLAYLIST_STORE\":\n      return action.playlists;\n\n    default:\n      return state;\n  }\n}\n\nfunction songsReducer(state = [], action) {\n  switch (action.type) {\n    case \"ADD_SONG\":\n      const song = {\n        title: action.song.title,\n        clientId: uuid()\n      };\n      return [...state, song];\n\n    case \"DELETE_SONG\":\n      return state.filter(song => song.clientId !== action.clientId);\n    // case \"SAVE_SONG\":\n    //     return null\n\n    case \"RESET_SONG_STORE\":\n      return action.songs;\n\n    default:\n      return state;\n  }\n}\n\nfunction searchReducer(state = [], action) {\n  switch (action.type) {\n    case \"ADD_SEARCH_RESULTS\":\n      return action.searchResults;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/reducers/managePlaylist.js"],"names":["combineReducers","v4","uuid","rootReducer","user","userReducer","playlists","playlistsReducer","songs","songsReducer","searchResults","searchReducer","state","id","username","isLoggedIn","loading","action","type","playlist","filter","song","title","clientId"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAChCI,EAAAA,IAAI,EAAEC,WAD0B;AAEhCC,EAAAA,SAAS,EAAEC,gBAFqB;AAGhCC,EAAAA,KAAK,EAAEC,YAHyB;AAIhCC,EAAAA,aAAa,EAAEC;AAJiB,CAAD,CAAnC;AAOA,eAAeR,WAAf;;AAEA,SAASE,WAAT,CAAqBO,KAAK,GAAG;AAAEC,EAAAA,EAAE,EAAC,EAAL;AAASC,EAAAA,QAAQ,EAAE,EAAnB;AAAuBC,EAAAA,UAAU,EAAE,KAAnC;AAA0CC,EAAAA,OAAO,EAAE;AAAnD,CAA7B,EAAwFC,MAAxF,EAAgG;AAE5F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,aAAO,EAAE,GAAGN,KAAL;AAAYI,QAAAA,OAAO,EAAE;AAArB,OAAP;;AAEJ,SAAK,YAAL;AACI,aAAO,EAAE,GAAGC,MAAM,CAACb,IAAZ;AAAkBY,QAAAA,OAAO,EAAE;AAA3B,OAAP;;AAEJ,SAAK,aAAL;AACI,aAAO;AAAED,QAAAA,UAAU,EAAE,KAAd;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OAAP;;AAEJ;AACI,aAAOJ,KAAP;AAXR;AAaH;;AAED,SAASL,gBAAT,CAA0BK,KAAK,GAAG,EAAlC,EAAsCK,MAAtC,EAA8C;AAE1C,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,cAAL;AACI,aAAO,CAAC,GAAGN,KAAJ,EAAWK,MAAM,CAACE,QAAlB,CAAP;AACA;AACA;;AAEJ,SAAK,iBAAL;AACI,aAAOP,KAAK,CAACQ,MAAN,CAAcD,QAAQ,IAAIA,QAAQ,CAACN,EAAT,KAAgBI,MAAM,CAACJ,EAAjD,CAAP;;AAEJ,SAAK,sBAAL;AACI,aAAOI,MAAM,CAACX,SAAd;;AAEJ;AACI,aAAOM,KAAP;AAdR;AAgBH;;AAED,SAASH,YAAT,CAAsBG,KAAK,GAAG,EAA9B,EAAkCK,MAAlC,EAA0C;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,YAAMG,IAAI,GAAG;AAAEC,QAAAA,KAAK,EAAEL,MAAM,CAACI,IAAP,CAAYC,KAArB;AAA4BC,QAAAA,QAAQ,EAAErB,IAAI;AAA1C,OAAb;AACA,aAAO,CAAC,GAAGU,KAAJ,EAAWS,IAAX,CAAP;;AAEJ,SAAK,aAAL;AACI,aAAOT,KAAK,CAACQ,MAAN,CAAcC,IAAI,IAAIA,IAAI,CAACE,QAAL,KAAkBN,MAAM,CAACM,QAA/C,CAAP;AAEJ;AACA;;AAEA,SAAK,kBAAL;AACI,aAAON,MAAM,CAACT,KAAd;;AAEJ;AACI,aAAOI,KAAP;AAfR;AAiBH;;AAED,SAASD,aAAT,CAAuBC,KAAK,GAAG,EAA/B,EAAmCK,MAAnC,EAA2C;AACvC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,oBAAL;AACI,aAAOD,MAAM,CAACP,aAAd;;AAEJ;AACI,aAAOE,KAAP;AALR;AAQH","sourcesContent":["import { combineReducers } from \"redux\"\nimport { v4 as uuid } from \"uuid\"; \n\nconst rootReducer = combineReducers({\n    user: userReducer,\n    playlists: playlistsReducer,\n    songs: songsReducer,\n    searchResults: searchReducer\n})\n\nexport default rootReducer;\n\nfunction userReducer(state = { id:'', username: '', isLoggedIn: false, loading: true }, action) {\n    \n    switch (action.type) {\n        case \"LOADING_USER\":\n            return { ...state, loading: true }\n        \n        case \"LOGIN_USER\":\n            return { ...action.user, loading: false }\n\n        case \"LOGOUT_USER\":\n            return { isLoggedIn: false, loading: false }\n\n        default:\n            return state\n    }\n}\n\nfunction playlistsReducer(state = [], action) {\n\n    switch (action.type) {\n\n        case \"ADD_PLAYLIST\":\n            return [...state, action.playlist]\n            // Alternative code: Only add a playlist if it is not already in state\n            // return state.find(e => e.id === action.playlist.id) ? [...state] : [...state, action.playlist];    \n\n        case \"DELETE_PLAYLIST\": \n            return state.filter( playlist => playlist.id !== action.id );\n            \n        case \"RESET_PLAYLIST_STORE\":\n            return action.playlists;\n\n        default:\n            return state;\n    }\n}\n\nfunction songsReducer(state = [], action) {\n    switch (action.type) {\n        case \"ADD_SONG\":\n            const song = { title: action.song.title, clientId: uuid() };\n            return [...state, song]\n\n        case \"DELETE_SONG\":\n            return state.filter( song => song.clientId !== action.clientId )\n           \n        // case \"SAVE_SONG\":\n        //     return null\n\n        case \"RESET_SONG_STORE\":\n            return action.songs;\n\n        default:\n            return state\n    }\n}\n\nfunction searchReducer(state = [], action) {\n    switch (action.type) {\n        case \"ADD_SEARCH_RESULTS\":\n            return action.searchResults\n\n        default:\n            return state\n    }\n\n}"]},"metadata":{},"sourceType":"module"}