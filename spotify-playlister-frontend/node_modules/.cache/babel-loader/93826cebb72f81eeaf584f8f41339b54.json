{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/SongsContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SearchContainer from './SearchContainer';\nimport Songs from '../components/songs/Songs';\nimport { addSong, updateSong } from '../actions/songActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SongsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.findPlaylist = () => this.props.playlists.find(e => e.id === parseInt(this.props.match.params.playlistId, 10));\n\n    this.authPlaylist = () => !!this.findPlaylist() ? this.loadPage() : this.redirect();\n\n    this.redirect = () => this.props.history.push(`/users/${this.props.user.id}/playlists`);\n\n    this.loadPage = () => {\n      const {\n        match,\n        songs,\n        addSong,\n        updateSong\n      } = this.props;\n      const playlistSongs = songs.filter(song => song.playlistIds.includes(parseInt(match.params.playlistId, 10)));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n          match: match,\n          addSong: addSong\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Songs, {\n          playlistName: this.findPlaylist().name,\n          playlistSongs: playlistSongs,\n          match: match,\n          updateSong: updateSong\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    this.props.deleteSearchResults();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.authPlaylist()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 24\n    }, this);\n  }\n\n}\n\n;\nexport default connect(({\n  songs\n}) => ({\n  songs\n}), {\n  addSong,\n  updateSong\n})(SongsContainer);","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/SongsContainer.js"],"names":["React","Component","connect","SearchContainer","Songs","addSong","updateSong","SongsContainer","findPlaylist","props","playlists","find","e","id","parseInt","match","params","playlistId","authPlaylist","loadPage","redirect","history","push","user","songs","playlistSongs","filter","song","playlistIds","includes","name","componentDidMount","deleteSearchResults","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,wBAApC;;;AAEA,MAAMC,cAAN,SAA6BN,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAInCO,YAJmC,GAIpB,MAAM,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,IAArB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASC,QAAQ,CAAC,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBC,UAAzB,EAAqC,EAArC,CAAjD,CAJc;;AAAA,SAKnCC,YALmC,GAKpB,MAAM,CAAC,CAAC,KAAKV,YAAL,EAAF,GAAwB,KAAKW,QAAL,EAAxB,GAA0C,KAAKC,QAAL,EAL5B;;AAAA,SAMnCA,QANmC,GAMxB,MAAM,KAAKX,KAAL,CAAWY,OAAX,CAAmBC,IAAnB,CAAyB,UAAS,KAAKb,KAAL,CAAWc,IAAX,CAAgBV,EAAG,YAArD,CANkB;;AAAA,SAQnCM,QARmC,GAQxB,MAAM;AAEb,YAAM;AAACJ,QAAAA,KAAD;AAAQS,QAAAA,KAAR;AAAenB,QAAAA,OAAf;AAAwBC,QAAAA;AAAxB,UAAsC,KAAKG,KAAjD;AACA,YAAMgB,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAcC,IAAI,IAAIA,IAAI,CAACC,WAAL,CAAiBC,QAAjB,CAA0Bf,QAAQ,CAACC,KAAK,CAACC,MAAN,CAAaC,UAAd,EAA0B,EAA1B,CAAlC,CAAtB,CAAtB;AAEA,0BACI;AAAA,gCACI,QAAC,eAAD;AAAiB,UAAA,KAAK,EAAEF,KAAxB;AAA+B,UAAA,OAAO,EAAEV;AAAxC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,YAAY,EAAE,KAAKG,YAAL,GAAoBsB,IAAzC;AAA+C,UAAA,aAAa,EAAEL,aAA9D;AAA6E,UAAA,KAAK,EAAEV,KAApF;AAA2F,UAAA,UAAU,EAAET;AAAvG;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH,KAnBkC;AAAA;;AAEnCyB,EAAAA,iBAAiB,GAAG;AAAE,SAAKtB,KAAL,CAAWuB,mBAAX;AAAkC;;AAmBxDC,EAAAA,MAAM,GAAI;AAAE,wBAAO;AAAA,gBAAM,KAAKf,YAAL;AAAN;AAAA;AAAA;AAAA;AAAA,YAAP;AAAyC;;AArBlB;;AAuBtC;AAED,eAAehB,OAAO,CAAE,CAAC;AAACsB,EAAAA;AAAD,CAAD,MAAc;AAACA,EAAAA;AAAD,CAAd,CAAF,EAA2B;AAAEnB,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAA3B,CAAP,CAA4DC,cAA5D,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport SearchContainer from './SearchContainer'\nimport Songs from '../components/songs/Songs'\nimport { addSong, updateSong } from '../actions/songActions'\n\nclass SongsContainer extends Component {\n\n    componentDidMount() { this.props.deleteSearchResults() }\n\n    findPlaylist = () => this.props.playlists.find( e => e.id === parseInt(this.props.match.params.playlistId, 10) )\n    authPlaylist = () => !!this.findPlaylist() ? this.loadPage() : this.redirect()\n    redirect = () => this.props.history.push(`/users/${this.props.user.id}/playlists`)\n\n    loadPage = () => {\n\n        const {match, songs, addSong, updateSong} = this.props\n        const playlistSongs = songs.filter( song => song.playlistIds.includes(parseInt(match.params.playlistId, 10)))\n        \n        return (\n            <div>\n                <SearchContainer match={match} addSong={addSong} />\n                <Songs playlistName={this.findPlaylist().name} playlistSongs={playlistSongs} match={match} updateSong={updateSong} />\n            </div>\n        )\n    }\n    \n    render () { return <div>{this.authPlaylist()}</div> }\n\n};\n\nexport default connect( ({songs}) => ({songs} ), { addSong, updateSong } )(SongsContainer)"]},"metadata":{},"sourceType":"module"}