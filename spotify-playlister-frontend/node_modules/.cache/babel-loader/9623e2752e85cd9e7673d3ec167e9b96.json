{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js\";\nimport React, { Component } from 'react';\nimport Holding from '../components/Holding';\nimport NavBar from '../components/NavBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlaylistsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoading = () => {\n      if (this.props.loginInfo.loading) {\n        return this.tempPage();\n      } else {\n        return this.authUser();\n      }\n    };\n\n    this.authUser = () => {\n      debugger;\n\n      if (this.props.loginInfo.user.id === this.props.match.params.user_id) {\n        return this.loadPage();\n      } else {\n        return this.redirect();\n      }\n    };\n\n    this.redirect = () => {\n      this.props.history.push('/');\n    };\n\n    this.tempPage = () => /*#__PURE__*/_jsxDEV(Holding, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 20\n    }, this);\n\n    this.loadPage = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(NavBar, {\n          loginInfo: this.props.loginInfo,\n          updateLoginInfo: this.props.updateLoginInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    debugger;\n    this.props.fetchLoginInfo();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.handleLoading()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 22\n    }, this);\n  }\n\n}\n\n;\nexport default PlaylistsContainer;","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js"],"names":["React","Component","Holding","NavBar","PlaylistsContainer","handleLoading","props","loginInfo","loading","tempPage","authUser","user","id","match","params","user_id","loadPage","redirect","history","push","updateLoginInfo","componentDidMount","fetchLoginInfo","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,kBAAN,SAAiCH,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAOzCI,aAPyC,GAOzB,MAAM;AACpB,UAAI,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,OAAzB,EAAkC;AAChC,eAAO,KAAKC,QAAL,EAAP;AACD,OAFD,MAEQ;AACN,eAAO,KAAKC,QAAL,EAAP;AACD;AACF,KAbwC;;AAAA,SAezCA,QAfyC,GAe9B,MAAM;AACf;;AACA,UAAI,KAAKJ,KAAL,CAAWC,SAAX,CAAqBI,IAArB,CAA0BC,EAA1B,KAAiC,KAAKN,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,CAAwBC,OAA7D,EAAsE;AACpE,eAAO,KAAKC,QAAL,EAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKC,QAAL,EAAP;AACD;AACF,KAtBwC;;AAAA,SAwBzCA,QAxByC,GAwB9B,MAAM;AACf,WAAKX,KAAL,CAAWY,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,KA1BwC;;AAAA,SA4BzCV,QA5ByC,GA4B9B,mBAAM,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YA5BwB;;AAAA,SA8BzCO,QA9ByC,GA8B9B,MAAM;AACf,0BACE;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAE,KAAKV,KAAL,CAAWC,SAA9B;AAAyC,UAAA,eAAe,EAAE,KAAKD,KAAL,CAAWc;AAArE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KApCwC;AAAA;;AAEzCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKf,KAAL,CAAWgB,cAAX;AACD;;AAiCDC,EAAAA,MAAM,GAAI;AAAE,wBAAO;AAAA,gBAAO,KAAKlB,aAAL;AAAP;AAAA;AAAA;AAAA;AAAA,YAAP;AAA4C;;AAtCf;;AAuC1C;AAED,eAAeD,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Holding from '../components/Holding'\nimport NavBar from '../components/NavBar'\n\nclass PlaylistsContainer extends Component {\n\n  componentDidMount() {\n    debugger\n    this.props.fetchLoginInfo()\n  }\n\n  handleLoading = () => {\n    if (this.props.loginInfo.loading) {\n      return this.tempPage()\n    }  else {\n      return this.authUser()\n    }\n  }\n\n  authUser = () => {\n    debugger\n    if (this.props.loginInfo.user.id === this.props.match.params.user_id) {\n      return this.loadPage()\n    } else {\n      return this.redirect()\n    }\n  }\n\n  redirect = () => {\n    this.props.history.push('/')\n  }\n\n  tempPage = () => <Holding />\n\n  loadPage = () => {\n    return (\n      <div>\n        <NavBar loginInfo={this.props.loginInfo} updateLoginInfo={this.props.updateLoginInfo} />\n      </div>\n    );\n  }\n\n  render () { return <div>{ this.handleLoading() }</div> }\n};\n  \nexport default PlaylistsContainer;"]},"metadata":{},"sourceType":"module"}