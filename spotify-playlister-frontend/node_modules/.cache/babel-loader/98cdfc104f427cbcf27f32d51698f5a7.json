{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlaylistsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = () => {\n      fetch('http://localhost:3001/logout', {\n        method: 'DELETE',\n        credentials: 'include'\n      }).then(() => {\n        this.props.updateLoginInfo({\n          isLoggedIn: false,\n          user: {}\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loginInfo.loading) {\n        debugger;\n        this.tempPage();\n      } else {\n        debugger;\n        this.authUser();\n      }\n    };\n\n    this.authUser = () => this.props.loginInfo.isLoggedIn ? this.loadPage() : this.redirect();\n\n    this.redirect = () => {\n      this.props.history.push('/');\n    };\n\n    this.tempPage = () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"playlistContainer temp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }, this);\n\n    this.loadPage = () => {\n      debugger;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    debugger;\n    this.props.fetchLoginInfo();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.handleLoading()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 22\n    }, this);\n  }\n\n}\n\n;\nexport default PlaylistsContainer;","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js"],"names":["React","Component","Link","PlaylistsContainer","handleClick","fetch","method","credentials","then","props","updateLoginInfo","isLoggedIn","user","catch","error","console","log","handleLoading","loginInfo","loading","tempPage","authUser","loadPage","redirect","history","push","componentDidMount","fetchLoginInfo","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,kBAAN,SAAiCF,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAEzCG,WAFyC,GAE3B,MAAM;AAClBC,MAAAA,KAAK,CAAC,8BAAD,EAAiC;AAClCC,QAAAA,MAAM,EAAE,QAD0B;AAElCC,QAAAA,WAAW,EAAE;AAFqB,OAAjC,CAAL,CAICC,IAJD,CAIO,MAAM;AACX,aAAKC,KAAL,CAAWC,eAAX,CAA2B;AAAEC,UAAAA,UAAU,EAAE,KAAd;AAAqBC,UAAAA,IAAI,EAAE;AAA3B,SAA3B;AACD,OAND,EAOCC,KAPD,CAOOC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAPhB;AAQD,KAXwC;;AAAA,SAkBzCG,aAlByC,GAkBzB,MAAM;AACpB,UAAI,KAAKR,KAAL,CAAWS,SAAX,CAAqBC,OAAzB,EAAkC;AAChC;AACA,aAAKC,QAAL;AACD,OAHD,MAGQ;AACN;AACA,aAAKC,QAAL;AACD;AACF,KA1BwC;;AAAA,SA4BzCA,QA5ByC,GA4B9B,MAAM,KAAKZ,KAAL,CAAWS,SAAX,CAAqBP,UAArB,GAAkC,KAAKW,QAAL,EAAlC,GAAoD,KAAKC,QAAL,EA5B5B;;AAAA,SA8BzCA,QA9ByC,GA8B9B,MAAM;AACf,WAAKd,KAAL,CAAWe,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,KAhCwC;;AAAA,SAkCzCL,QAlCyC,GAkC9B,mBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlCwB;;AAAA,SAoCzCE,QApCyC,GAoC9B,MAAM;AACf;AACA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KA7CwC;AAAA;;AAazCI,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKjB,KAAL,CAAWkB,cAAX;AACD;;AA+BDC,EAAAA,MAAM,GAAI;AAAE,wBAAO;AAAA,gBAAO,KAAKX,aAAL;AAAP;AAAA;AAAA;AAAA;AAAA,YAAP;AAA4C;;AA/Cf;;AAgD1C;AAED,eAAed,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass PlaylistsContainer extends Component {\n\n  handleClick = () => {        \n    fetch('http://localhost:3001/logout', {\n        method: 'DELETE',\n        credentials: 'include'\n    })\n    .then( () => {\n      this.props.updateLoginInfo({ isLoggedIn: false, user: {} })\n    })\n    .catch(error => console.log(error))\n  }\n\n  componentDidMount() {\n    debugger\n    this.props.fetchLoginInfo()\n  }\n\n  handleLoading = () => {\n    if (this.props.loginInfo.loading) {\n      debugger\n      this.tempPage()\n    }  else {\n      debugger\n      this.authUser()\n    }\n  }\n\n  authUser = () => this.props.loginInfo.isLoggedIn ? this.loadPage() : this.redirect();\n\n  redirect = () => {\n    this.props.history.push('/')\n  }\n\n  tempPage = () => <div>playlistContainer temp</div>\n\n  loadPage = () => {\n    debugger\n    return (\n      <div>\n        {/* <button onClick={this.handleClick}>Log Out</button>\n        {this.props.loginInfo.user.id} */}\n        hello\n      </div>\n    );\n  }\n\n  render () { return <div>{ this.handleLoading() }</div> }\n};\n  \nexport default PlaylistsContainer;"]},"metadata":{},"sourceType":"module"}