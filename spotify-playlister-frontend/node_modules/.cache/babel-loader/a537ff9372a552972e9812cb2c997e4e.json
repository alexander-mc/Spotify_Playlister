{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js\";\nimport React, { Component } from 'react';\nimport Holding from '../components/Holding';\nimport NavBar from '../components/NavBar';\nimport PlaylistsList from '../components/playlists/PlaylistsList';\nimport PlaylistInput from '../components/playlists/PlaylistInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlaylistsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoading = () => {\n      if (this.props.user.loading) {\n        return this.tempPage();\n      } else {\n        return this.authUser();\n      }\n    };\n\n    this.authUser = () => {\n      // Check user has logged in + :userId matches logged in user id\n      // If :userId does not match logged in user id, force correct user id in url and redirect PlaylistContainer\n      const isValidUser = this.props.user.id === parseInt(this.props.match.params.userId, 10);\n\n      if (isValidUser) {\n        return this.loadPage();\n      } else {\n        return this.redirect();\n      }\n    };\n\n    this.redirect = () => {\n      this.props.history.push('/');\n    };\n\n    this.tempPage = () => /*#__PURE__*/_jsxDEV(Holding, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 20\n    }, this);\n\n    this.loadPage = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          user: this.props.user,\n          deleteUser: this.props.deleteUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PlaylistInput, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PlaylistsList, {\n          url: this.props.match.url,\n          playlists: this.props.playlists\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${match.url}/:playlistId`,\n          render: props => /*#__PURE__*/_jsxDEV(Playlist, { ...props,\n            playlists: this.props.playlists\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.handleLoading()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 22\n    }, this);\n  }\n\n}\n\n;\nexport default PlaylistsContainer;","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js"],"names":["React","Component","Holding","NavBar","PlaylistsList","PlaylistInput","PlaylistsContainer","handleLoading","props","user","loading","tempPage","authUser","isValidUser","id","parseInt","match","params","userId","loadPage","redirect","history","push","deleteUser","url","playlists","componentDidMount","fetchUser","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,aAAP,MAA0B,uCAA1B;;;AAEA,MAAMC,kBAAN,SAAiCL,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAMzCM,aANyC,GAMzB,MAAM;AACpB,UAAI,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,OAApB,EAA6B;AAC3B,eAAO,KAAKC,QAAL,EAAP;AACD,OAFD,MAEQ;AACN,eAAO,KAAKC,QAAL,EAAP;AACD;AACF,KAZwC;;AAAA,SAczCA,QAdyC,GAc9B,MAAM;AACf;AACA;AACA,YAAMC,WAAW,GAAG,KAAKL,KAAL,CAAWC,IAAX,CAAgBK,EAAhB,KAAuBC,QAAQ,CAAC,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBC,MAAzB,EAAiC,EAAjC,CAAnD;;AACA,UAAIL,WAAJ,EAAiB;AACf,eAAO,KAAKM,QAAL,EAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKC,QAAL,EAAP;AACD;AACF,KAvBwC;;AAAA,SAyBzCA,QAzByC,GAyB9B,MAAM;AACf,WAAKZ,KAAL,CAAWa,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,KA3BwC;;AAAA,SA6BzCX,QA7ByC,GA6B9B,mBAAM,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YA7BwB;;AAAA,SA+BzCQ,QA/ByC,GA+B9B,MAAM;AACf,0BACE;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAE,KAAKX,KAAL,CAAWC,IAAzB;AAA+B,UAAA,UAAU,EAAE,KAAKD,KAAL,CAAWe;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,aAAD;AAAe,UAAA,GAAG,EAAE,KAAKf,KAAL,CAAWQ,KAAX,CAAiBQ,GAArC;AAA0C,UAAA,SAAS,EAAE,KAAKhB,KAAL,CAAWiB;AAAhE;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,KAAD;AACE,UAAA,KAAK,MADP;AACQ,UAAA,IAAI,EAAG,GAAET,KAAK,CAACQ,GAAI,cAD3B;AAEE,UAAA,MAAM,EAAGhB,KAAK,iBACd,QAAC,QAAD,OAAcA,KAAd;AAAqB,YAAA,SAAS,EAAE,KAAKA,KAAL,CAAWiB;AAA3C;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAWD,KA3CwC;AAAA;;AAEzCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKlB,KAAL,CAAWmB,SAAX;AACD;;AAyCDC,EAAAA,MAAM,GAAI;AAAE,wBAAO;AAAA,gBAAO,KAAKrB,aAAL;AAAP;AAAA;AAAA;AAAA;AAAA,YAAP;AAA4C;;AA7Cf;;AA8C1C;AAED,eAAeD,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Holding from '../components/Holding'\nimport NavBar from '../components/NavBar'\nimport PlaylistsList from '../components/playlists/PlaylistsList'\nimport PlaylistInput from '../components/playlists/PlaylistInput'\n\nclass PlaylistsContainer extends Component {\n\n  componentDidMount() {\n    this.props.fetchUser()\n  }\n\n  handleLoading = () => {\n    if (this.props.user.loading) {\n      return this.tempPage()\n    }  else {\n      return this.authUser()\n    }\n  }\n\n  authUser = () => {\n    // Check user has logged in + :userId matches logged in user id\n    // If :userId does not match logged in user id, force correct user id in url and redirect PlaylistContainer\n    const isValidUser = this.props.user.id === parseInt(this.props.match.params.userId, 10)\n    if (isValidUser) {\n      return this.loadPage()\n    } else {\n      return this.redirect()\n    }\n  }\n\n  redirect = () => {\n    this.props.history.push('/')\n  }\n\n  tempPage = () => <Holding />\n\n  loadPage = () => {\n    return (\n      <div>\n        <NavBar user={this.props.user} deleteUser={this.props.deleteUser} />\n        <PlaylistInput />\n        <PlaylistsList url={this.props.match.url} playlists={this.props.playlists} />\n        <Route \n          exact path={`${match.url}/:playlistId`}\n          render={ props => (\n          <Playlist {...props} playlists={this.props.playlists}/>  )}/>\n      </div>\n    );\n  }\n\n  render () { return <div>{ this.handleLoading() }</div> }\n};\n  \nexport default PlaylistsContainer;"]},"metadata":{},"sourceType":"module"}