{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js\";\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Holding from '../components/Holding';\nimport NavBar from '../components/NavBar';\nimport Playlist from '../components/playlists/Playlist';\nimport Playlists from '../components/playlists/Playlists';\nimport PlaylistInput from '../components/playlists/PlaylistInput';\nimport { connect } from 'react-redux';\nimport { addPlaylist, deletePlaylist } from '../actions/playlistActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlaylistsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoading = () => {\n      if (this.props.user.loading) {\n        return this.tempPage();\n      } else {\n        return this.authUser();\n      }\n    };\n\n    this.authUser = () => {\n      // Check user has logged in + :userId matches logged in user id\n      // If :userId does not match logged in user id, force correct user id in url and redirect PlaylistContainer\n      const isValidUser = this.props.user.id === parseInt(this.props.match.params.userId, 10);\n\n      if (isValidUser) {\n        return this.loadPage();\n      } else {\n        return this.redirect();\n      }\n    };\n\n    this.redirect = () => {\n      this.props.history.push('/');\n    };\n\n    this.tempPage = () => /*#__PURE__*/_jsxDEV(Holding, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 20\n    }, this);\n\n    this.loadPage = () => {\n      const {\n        user,\n        logoutUser,\n        match,\n        playlists,\n        addPlaylist,\n        deletePlaylist\n      } = this.props;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          user: user,\n          logoutUser: logoutUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PlaylistInput, {\n          addPlaylist: addPlaylist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Playlists, {\n          url: match.url,\n          playlists: playlists,\n          deletePlaylist: deletePlaylist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${match.url}/:playlistId/songs`,\n          render: props => /*#__PURE__*/_jsxDEV(SongsContainer, { ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.handleLoading()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 22\n    }, this);\n  }\n\n}\n\n;\nexport default connect(({\n  playlists\n}) => ({\n  playlists\n}), {\n  addPlaylist,\n  deletePlaylist\n})(PlaylistsContainer);","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js"],"names":["React","Component","Route","Holding","NavBar","Playlist","Playlists","PlaylistInput","connect","addPlaylist","deletePlaylist","PlaylistsContainer","handleLoading","props","user","loading","tempPage","authUser","isValidUser","id","parseInt","match","params","userId","loadPage","redirect","history","push","logoutUser","playlists","url","componentDidMount","fetchUser","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Holding from '../components/Holding'\nimport NavBar from '../components/NavBar'\nimport Playlist from '../components/playlists/Playlist'\nimport Playlists from '../components/playlists/Playlists'\nimport PlaylistInput from '../components/playlists/PlaylistInput'\nimport { connect } from 'react-redux'\nimport { addPlaylist, deletePlaylist } from '../actions/playlistActions'\n\nclass PlaylistsContainer extends Component {\n\n  componentDidMount() {\n    this.props.fetchUser()\n  }\n\n  handleLoading = () => {\n    if (this.props.user.loading) {\n      return this.tempPage()\n    }  else {\n      return this.authUser()\n    }\n  }\n\n  authUser = () => {\n    // Check user has logged in + :userId matches logged in user id\n    // If :userId does not match logged in user id, force correct user id in url and redirect PlaylistContainer\n    const isValidUser = this.props.user.id === parseInt(this.props.match.params.userId, 10)\n    if (isValidUser) {\n      return this.loadPage()\n    } else {\n      return this.redirect()\n    }\n  }\n\n  redirect = () => {\n    this.props.history.push('/')\n  }\n\n  tempPage = () => <Holding />\n\n  loadPage = () => {\n    const { user, logoutUser, match, playlists, addPlaylist, deletePlaylist } = this.props\n\n    return (\n      <div>\n        <NavBar user={user} logoutUser={logoutUser} />\n        <PlaylistInput addPlaylist={addPlaylist} />\n        <Playlists url={match.url} playlists={playlists} deletePlaylist={deletePlaylist} />\n        <Route \n          exact path={`${match.url}/:playlistId/songs`}\n          render={ props => (\n          <SongsContainer {...props} /> )}\n        />\n      </div>\n    );\n  }\n\n  render () { return <div>{ this.handleLoading() }</div> }\n};\n  \nexport default connect( ({playlists}) => ({playlists}), { addPlaylist, deletePlaylist } )(PlaylistsContainer)"]},"metadata":{},"sourceType":"module"}