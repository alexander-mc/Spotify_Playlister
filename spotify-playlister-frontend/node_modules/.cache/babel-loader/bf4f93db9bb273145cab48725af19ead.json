{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/search/SearchResult.js\";\nimport React from 'react';\nimport styles from './Search.module.css';\nimport addIcon from '../../assets/images/add-icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchResult = ({\n  match,\n  addSong,\n  searchResult,\n  deleteSearchResults,\n  songs,\n  updateSong\n}) => {\n  const postSong = () => {\n    const configObj = {\n      song: {\n        title: searchResult.name,\n        album_name: searchResult.album.name,\n        artists: searchResult.artists.map(a => a.name),\n        url: searchResult.external_urls.spotify,\n        spotify_id: searchResult.id\n      }\n    };\n    fetch(`http://localhost:3001${match.url}`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      },\n      credentials: 'include',\n      body: JSON.stringify(configObj)\n    }).then(response => response.json()).then(json => {\n      if (!json.errors) {\n        const song = songs.find(s => s.spotify_id === json.spotify_id);\n        song ? updateSong(json) : addSong(json);\n        deleteSearchResults();\n      } else {\n        alert(json.errors.join(\"\\n\"));\n      }\n    }).catch(error => console.log('API errors:', error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles['list-grid'],\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: styles['add-icon'],\n      src: addIcon,\n      alt: 'Add song',\n      onClick: postSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['song-information'],\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Song: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          href: searchResult.external_urls.spotify,\n          children: searchResult.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Album: \", searchResult.album.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Artists: \", searchResult.artists.map(a => a.name).join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, searchResult.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SearchResult;\nexport default SearchResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/search/SearchResult.js"],"names":["React","styles","addIcon","SearchResult","match","addSong","searchResult","deleteSearchResults","songs","updateSong","postSong","configObj","song","title","name","album_name","album","artists","map","a","url","external_urls","spotify","spotify_id","id","fetch","method","headers","credentials","body","JSON","stringify","then","response","json","errors","find","s","alert","join","catch","error","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './Search.module.css';\nimport addIcon from '../../assets/images/add-icon.png'\nconst SearchResult = ({match, addSong, searchResult, deleteSearchResults, songs, updateSong}) => {\n\n    const postSong = () => {\n\n        const configObj = {\n            song: {\n                title: searchResult.name,\n                album_name: searchResult.album.name,\n                artists: searchResult.artists.map( a => a.name),\n                url: searchResult.external_urls.spotify,\n                spotify_id: searchResult.id\n            }\n        }\n\n        fetch(`http://localhost:3001${match.url}`, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n            credentials: 'include',\n            body: JSON.stringify(configObj)\n        })\n        .then(response => response.json())\n        .then( json => {\n\n            if (!json.errors) {\n                const song = songs.find( s => s.spotify_id === json.spotify_id )\n                song ? updateSong(json) : addSong(json)\n                deleteSearchResults()\n\n            } else {\n                alert(json.errors.join(\"\\n\"))\n            }\n\n        })\n        .catch(error => console.log('API errors:', error))\n\n    }\n\n    return (\n        <div className={styles['list-grid']} key={searchResult.id}>\n            <img className={styles['add-icon']} src={addIcon} alt={'Add song'} onClick={postSong} />\n            <div className={styles['song-information']} >\n                <p>Song: <a target=\"_blank\" rel=\"noopener noreferrer\" href={searchResult.external_urls.spotify}>{searchResult.name}</a></p>\n                <p>Album: {searchResult.album.name}</p>\n                <p>Artists: {searchResult.artists.map( a => a.name).join(', ')}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default SearchResult"]},"metadata":{},"sourceType":"module"}