{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/songs/Song.js\";\nimport React from 'react';\nimport styles from './Songs.module.css';\nimport deleteIcon from '../../assets/images/delete-icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Song = ({\n  playlistSong,\n  match,\n  updateSong\n}) => {\n  const handleClick = () => {\n    const configObj = {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      },\n      credentials: 'include'\n    };\n    fetch(`http://localhost:3001${match.url}/${playlistSong.id}`, configObj).then(response => response.json()).then(json => {\n      if (!json.errors) {\n        const {\n          playlistIds\n        } = playlistSong;\n        const index = playlistIds.indexOf(parseInt(match.params.playlistId, 10));\n        if (index > -1) playlistIds.splice(index, 1);\n        updateSong(playlistSong);\n      } else {\n        alert(json.errors.join(\"\\n\"));\n      }\n    }).catch(error => console.log('API errors:', error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles['list-grid'],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['song-info-container'],\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles['song-info-title'],\n          children: \"Song:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 20\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          className: styles['song-link'],\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          href: playlistSong.url,\n          children: playlistSong.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 77\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles['song-info-title'],\n          children: \"Album:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 20\n        }, this), \" \", playlistSong.album_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles['song-info-title'],\n          children: \"Artist(s):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 20\n        }, this), \" \", JSON.parse(playlistSong.artists).join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: styles['delete-icon'],\n      title: \"Delete\",\n      src: deleteIcon,\n      onClick: handleClick,\n      alt: \"Delete icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, playlistSong.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Song;\nexport default Song;\n\nvar _c;\n\n$RefreshReg$(_c, \"Song\");","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/songs/Song.js"],"names":["React","styles","deleteIcon","Song","playlistSong","match","updateSong","handleClick","configObj","method","headers","credentials","fetch","url","id","then","response","json","errors","playlistIds","index","indexOf","parseInt","params","playlistId","splice","alert","join","catch","error","console","log","title","album_name","JSON","parse","artists"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './Songs.module.css'\nimport deleteIcon from '../../assets/images/delete-icon.png'\n\nconst Song = ({playlistSong, match, updateSong}) => {\n    \n    const handleClick = () => {\n\n        const configObj = {\n            method: 'PUT',\n            headers: {'Content-type': 'application/json; charset=UTF-8'},\n            credentials: 'include'\n        }\n\n        fetch(`http://localhost:3001${match.url}/${playlistSong.id}`, configObj)   \n            .then(response => response.json())\n            .then(json => {\n                if (!json.errors) {\n                    const { playlistIds } = playlistSong\n                    const index = playlistIds.indexOf(parseInt(match.params.playlistId, 10))\n                    if (index > -1) playlistIds.splice(index, 1)\n                    updateSong(playlistSong)\n\n                } else {\n                    alert(json.errors.join(\"\\n\"))\n                } \n            })\n            .catch(error => console.log('API errors:', error))\n    }\n\n    return (\n        <div className={styles['list-grid']} key={playlistSong.id}>\n            <div className={styles['song-info-container']} >\n                <p><span className={styles['song-info-title']}>Song:</span> <a className={styles['song-link']} target=\"_blank\" rel=\"noopener noreferrer\" href={playlistSong.url}>{playlistSong.title}</a></p>\n                <p><span className={styles['song-info-title']}>Album:</span> {playlistSong.album_name}</p>\n                <p><span className={styles['song-info-title']}>Artist(s):</span> {JSON.parse(playlistSong.artists).join(', ')}</p>\n            </div>\n            <img className={styles['delete-icon']} title='Delete' src={deleteIcon} onClick={handleClick} alt='Delete icon' />\n        </div>\n    );\n  }\n \nexport default Song;"]},"metadata":{},"sourceType":"module"}