{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js\";\nimport React, { Component } from 'react';\nimport Holding from '../components/Holding';\nimport NavBar from '../components/NavBar';\nimport PlaylistsList from '../components/playlists/PlaylistsList';\nimport PlaylistInput from '../components/playlists/PlaylistInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlaylistsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoading = () => {\n      if (this.props.userInfo.loading) {\n        return this.tempPage();\n      } else {\n        return this.authUser();\n      }\n    };\n\n    this.authUser = () => {\n      // Check user has logged in + :user_id matches logged in user id\n      // If :user_id does not match logged in user id, force correct user id in url and redirect PlaylistContainer\n      const isValidUser = this.props.user.id === parseInt(this.props.match.params.user_id, 10);\n\n      if (isValidUser) {\n        return this.loadPage();\n      } else {\n        return this.redirect();\n      }\n    };\n\n    this.redirect = () => {\n      this.props.history.push('/');\n    };\n\n    this.tempPage = () => /*#__PURE__*/_jsxDEV(Holding, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 20\n    }, this);\n\n    this.loadPage = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          userInfo: this.props.userInfo,\n          updateUserInfo: this.props.updateUserInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PlaylistInput, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PlaylistsList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    // debugger\n    this.props.fetchUserInfo();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.handleLoading()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 22\n    }, this);\n  }\n\n}\n\n;\nexport default PlaylistsContainer;","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/containers/PlaylistsContainer.js"],"names":["React","Component","Holding","NavBar","PlaylistsList","PlaylistInput","PlaylistsContainer","handleLoading","props","userInfo","loading","tempPage","authUser","isValidUser","user","id","parseInt","match","params","user_id","loadPage","redirect","history","push","updateUserInfo","componentDidMount","fetchUserInfo","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,aAAP,MAA0B,uCAA1B;;;AAEA,MAAMC,kBAAN,SAAiCL,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAOzCM,aAPyC,GAOzB,MAAM;AACpB,UAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,OAAxB,EAAiC;AAC/B,eAAO,KAAKC,QAAL,EAAP;AACD,OAFD,MAEQ;AACN,eAAO,KAAKC,QAAL,EAAP;AACD;AACF,KAbwC;;AAAA,SAezCA,QAfyC,GAe9B,MAAM;AACf;AACA;AACA,YAAMC,WAAW,GAAG,KAAKL,KAAL,CAAWM,IAAX,CAAgBC,EAAhB,KAAuBC,QAAQ,CAAC,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,MAAjB,CAAwBC,OAAzB,EAAkC,EAAlC,CAAnD;;AACA,UAAIN,WAAJ,EAAiB;AACf,eAAO,KAAKO,QAAL,EAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKC,QAAL,EAAP;AACD;AACF,KAxBwC;;AAAA,SA0BzCA,QA1ByC,GA0B9B,MAAM;AACf,WAAKb,KAAL,CAAWc,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,KA5BwC;;AAAA,SA8BzCZ,QA9ByC,GA8B9B,mBAAM,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YA9BwB;;AAAA,SAgCzCS,QAhCyC,GAgC9B,MAAM;AACf,0BACE;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWC,QAA7B;AAAuC,UAAA,cAAc,EAAE,KAAKD,KAAL,CAAWgB;AAAlE;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KAxCwC;AAAA;;AAEzCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKjB,KAAL,CAAWkB,aAAX;AACD;;AAqCDC,EAAAA,MAAM,GAAI;AAAE,wBAAO;AAAA,gBAAO,KAAKpB,aAAL;AAAP;AAAA;AAAA;AAAA;AAAA,YAAP;AAA4C;;AA1Cf;;AA2C1C;AAED,eAAeD,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Holding from '../components/Holding'\nimport NavBar from '../components/NavBar'\nimport PlaylistsList from '../components/playlists/PlaylistsList'\nimport PlaylistInput from '../components/playlists/PlaylistInput'\n\nclass PlaylistsContainer extends Component {\n\n  componentDidMount() {\n    // debugger\n    this.props.fetchUserInfo()\n  }\n\n  handleLoading = () => {\n    if (this.props.userInfo.loading) {\n      return this.tempPage()\n    }  else {\n      return this.authUser()\n    }\n  }\n\n  authUser = () => {\n    // Check user has logged in + :user_id matches logged in user id\n    // If :user_id does not match logged in user id, force correct user id in url and redirect PlaylistContainer\n    const isValidUser = this.props.user.id === parseInt(this.props.match.params.user_id, 10)\n    if (isValidUser) {\n      return this.loadPage()\n    } else {\n      return this.redirect()\n    }\n  }\n\n  redirect = () => {\n    this.props.history.push('/')\n  }\n\n  tempPage = () => <Holding />\n\n  loadPage = () => {\n    return (\n      <div>\n        <NavBar userInfo={this.props.userInfo} updateUserInfo={this.props.updateUserInfo} />\n        <PlaylistInput />\n        <PlaylistsList />\n      </div>\n    );\n  }\n\n  render () { return <div>{ this.handleLoading() }</div> }\n};\n  \nexport default PlaylistsContainer;"]},"metadata":{},"sourceType":"module"}