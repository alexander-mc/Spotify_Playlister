{"ast":null,"code":"var _jsxFileName = \"/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/playlists/PlaylistInput.js\";\nimport React, { Component } from 'react';\nimport styles from './Playlists.module.css';\nimport addIcon from '../../assets/images/add-icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlaylistInput extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"\",\n      errors: \"\"\n    };\n\n    this.handleChange = e => this.setState({\n      name: e.target.value\n    });\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const {\n        user,\n        addPlaylist,\n        match,\n        history\n      } = this.props;\n      const configObj = {\n        playlist: {\n          name: this.state.name,\n          user_id: user.id\n        }\n      };\n      fetch(`http://localhost:3001${match.url}`, {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        },\n        credentials: 'include',\n        body: JSON.stringify(configObj)\n      }).then(response => response.json()).then(json => {\n        if (!json.errors) {\n          addPlaylist(json);\n          history.push(`${match.url}/${json.id}/songs`);\n        } else {\n          this.setState({\n            errors: json.errors\n          });\n        }\n      }).catch(error => console.log('API errors:', error));\n    };\n\n    this.handleErrors = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.errors.map(error => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: error\n            }, error, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 32\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['add-playlists-container'],\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles['add-playlists-txt'],\n        children: \"ADD A PLAYLIST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), this.state.errors ? this.handleErrors() : null, /*#__PURE__*/_jsxDEV(\"form\", {\n        className: styles['form-grid'],\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles['playlists-input'],\n          type: \"text\",\n          onChange: this.handleChange,\n          value: this.state.name,\n          placeholder: \"Enter a playlist name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles['add-icon'],\n          type: \"image\",\n          src: addIcon,\n          alt: \"Add Icon\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\nexport default PlaylistInput;","map":{"version":3,"sources":["/Users/Alexander/Documents/Coding/Flatiron School/3_Projects/spotify_playlister/spotify-playlister-frontend/src/components/playlists/PlaylistInput.js"],"names":["React","Component","styles","addIcon","PlaylistInput","state","name","errors","handleChange","e","setState","target","value","handleSubmit","preventDefault","user","addPlaylist","match","history","props","configObj","playlist","user_id","id","fetch","url","method","headers","credentials","body","JSON","stringify","then","response","json","push","catch","error","console","log","handleErrors","map","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styles from './Playlists.module.css';\nimport addIcon from '../../assets/images/add-icon.png'\n\nclass PlaylistInput extends Component {\n\n    state = { name: \"\", errors: \"\" }\n    \n    handleChange = (e) => this.setState({ name: e.target.value })\n    handleSubmit = (e) => {\n        e.preventDefault();\n        \n        const { user, addPlaylist, match, history } = this.props\n        const configObj = {\n            playlist: { name: this.state.name, user_id: user.id }\n        }\n\n        fetch(`http://localhost:3001${match.url}`, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n            credentials: 'include',\n            body: JSON.stringify(configObj)\n        })\n        .then(response => response.json())\n        .then( json => {\n            \n            if (!json.errors) {\n                addPlaylist(json)\n                history.push(`${match.url}/${json.id}/songs`)\n            } else {\n                this.setState({ errors: json.errors })\n            }\n\n        })\n        .catch(error => console.log('API errors:', error))\n    }\n    \n    render() {\n        return (\n            <div className={styles['add-playlists-container']}>\n                <h2 className={styles['add-playlists-txt']} >ADD A PLAYLIST</h2>\n                { this.state.errors ? this.handleErrors() : null }\n                    <form className={styles['form-grid']} onSubmit={ this.handleSubmit }>\n                        <input className={styles['playlists-input']} type=\"text\" onChange={ this.handleChange } value={this.state.name} placeholder='Enter a playlist name' />\n                        <input className={styles['add-icon']}  type=\"image\" src={addIcon} alt=\"Add Icon\" value=\"Submit\" />\n                    </form>\n            </div>\n        );\n    }\n\n    handleErrors = () => {\n        return (\n            <div>\n                <ul>\n                    {this.state.errors.map(error => {\n                        return <li key={error}>{error}</li>\n                    })}\n                </ul>\n            </div>\n        )\n    }\n};\n\nexport default PlaylistInput;"]},"metadata":{},"sourceType":"module"}